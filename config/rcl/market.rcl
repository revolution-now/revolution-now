# Describes some parameters of the price movement models for each
# market commodity. The semantics of each parameter depend on the
# particular model being used, which is different for different
# commodities. See the prices.txt doc for a more in-depth de-
# scription of the price models used by the original game, which
# is what we emulate here.
#
# Note: in the OG's config file (NAMES.TXT), the values repre-
# senting price limits appear to be equal to the bid price + 1,
# regardless of the bid/ask spread. So e.g. food is listed as
# having a min/max price of 1 and 6; if these represented real
# ask prices then it wouldn't make any sense because food has a
# bid/ask spread of 8, and so that would put the bid price below
# zero. So in reality that means that the limits are 0/5 on the
# bid price, and 8/13 on the ask. In this config though, we al-
# ways refer to bid prices to keep it readable.
price_behavior {
  food {
    # From NAMES.TXT: 1,  3,  1,  6,  7,  3,  2, -1,  0
    price_limits {
      bid_price_start_min:  0
      bid_price_start_max:  2
      bid_price_min:        0
      bid_price_max:        5
      bid_ask_spread:       8
    }
    model_parameters {
      rise:                 3
      fall:                 2
      attrition:           -1
      volatility:           0
    }
  }

  sugar {
    # From NAMES.TXT: 4,  7,  3,  7,  1,  4,  6, -8,  1
    price_limits {
      bid_price_start_min:  3
      bid_price_start_max:  6
      bid_price_min:        2
      bid_price_max:        6
      bid_ask_spread:       2
    }
    model_parameters {
      rise:                 4
      fall:                 6
      attrition:           -8
      volatility:           1
    }
  }

  tobacco {
    # From NAMES.TXT: 3,  5,  2,  5,  1,  4,  8,-10,  1
    price_limits {
      bid_price_start_min:  2
      bid_price_start_max:  4
      bid_price_min:        1
      bid_price_max:        4
      bid_ask_spread:       2
    }
    model_parameters {
      rise:                 4
      fall:                 8
      attrition:           -10
      volatility:           1
    }
  }

  cotton {
    # From NAMES.TXT: 2,  5,  2,  5,  1,  4,  6,-11,  1
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  4
      bid_price_min:        1
      bid_price_max:        4
      bid_ask_spread:       2
    }
    model_parameters {
      rise:                 4
      fall:                 6
      attrition:           -11
      volatility:           1
    }
  }

  fur {
    # From NAMES.TXT: 4,  6,  2,  6,  1,  4, 20,-13,  1
    price_limits {
      bid_price_start_min:  3
      bid_price_start_max:  5
      bid_price_min:        1
      bid_price_max:        5
      bid_ask_spread:       2
    }
    model_parameters {
      rise:                 4
      fall:                 20
      attrition:           -13
      volatility:           1
    }
  }

  lumber {
    # From NAMES.TXT: 2,  2,  2,  2,  4,  3,  2,  0,  0
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  1
      bid_price_min:        1
      bid_price_max:        1
      bid_ask_spread:       5
    }
    model_parameters {
      rise:                 3
      fall:                 2
      attrition:            0
      volatility:           0
    }
  }

  ore {
    # From NAMES.TXT: 3,  6,  2,  6,  2,  2,  4, -7,  0
    price_limits {
      bid_price_start_min:  2
      bid_price_start_max:  5
      bid_price_min:        1
      bid_price_max:        5
      bid_ask_spread:       3
    }
    model_parameters {
      rise:                 2
      fall:                 4
      attrition:           -7
      volatility:           0
    }
  }

  silver {
    # From NAMES.TXT: 20,  20,  2, 20,  0,  8,  1, -8,  2
    price_limits {
      bid_price_start_min:  19
      bid_price_start_max:  19
      bid_price_min:        1
      bid_price_max:        19
      bid_ask_spread:       1
    }
    model_parameters {
      rise:                 8
      fall:                 1
      attrition:           -8
      volatility:           2
    }
  }

  horses {
    # From NAMES.TXT: 2,  3,  2, 11,  0,  3,  2, -3,  0
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  2
      bid_price_min:        1
      bid_price_max:        10
      bid_ask_spread:       1
    }
    model_parameters {
      rise:                 3
      fall:                 2
      attrition:           -3
      volatility:           0
    }
  }

  rum {
    # From NAMES.TXT: 11, 13,  1, 20,  0,  4,  4,-12,  1
    price_limits {
      bid_price_start_min:  10  # Not used
      bid_price_start_max:  12  # Not used
      bid_price_min:        0
      bid_price_max:        19
      bid_ask_spread:       1
    }
    model_parameters {
      rise:                 4
      fall:                 4
      attrition:           -12  # Not used
      volatility:           1
    }
  }

  cigars {
    # From NAMES.TXT: 11, 13,  1, 20,  0,  4,  4,-11,  1
    price_limits {
      bid_price_start_min:  10  # Not used
      bid_price_start_max:  12  # Not used
      bid_price_min:        0
      bid_price_max:        19
      bid_ask_spread:       1
    }
    model_parameters {
      rise:                 4
      fall:                 4
      attrition:           -11  # Not used
      volatility:           1
    }
  }

  cloth {
    # From NAMES.TXT: 11, 13,  1, 20,  0,  4,  4,-13,  1
    price_limits {
      bid_price_start_min:  10  # Not used
      bid_price_start_max:  12  # Not used
      bid_price_min:        0
      bid_price_max:        19
      bid_ask_spread:       1
    }
    model_parameters {
      rise:                 4
      fall:                 4
      attrition:           -13  # Not used
      volatility:           1
    }
  }

  coats {
    # From NAMES.TXT: 11, 13,  1, 20,  0,  4,  4,-11,  1
    price_limits {
      bid_price_start_min:  10  # Not used
      bid_price_start_max:  12  # Not used
      bid_price_min:        0
      bid_price_max:        19
      bid_ask_spread:       1
    }
    model_parameters {
      rise:                 4
      fall:                 4
      attrition:           -11  # Not used
      volatility:           1
    }
  }

  trade_goods {
    # From NAMES.TXT: 2,  3,  2, 12,  0,  2,  3,  4,  0
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  2
      bid_price_min:        1
      bid_price_max:        11
      bid_ask_spread:       1
    }
    model_parameters {
      rise:                 2
      fall:                 3
      attrition:            4
      volatility:           0
    }
  }

  tools {
    # From NAMES.TXT: 2,  2,  2,  9,  0,  2,  2,  5,  0
    price_limits {
      bid_price_start_min:  1
      bid_price_start_max:  1
      bid_price_min:        1
      bid_price_max:        8
      bid_ask_spread:       1
    }
    model_parameters {
      rise:                 2
      fall:                 2
      attrition:            5
      volatility:           0
    }
  }

  muskets {
    # From NAMES.TXT: 3,  3,  2, 20,  0,  2,  2,  6,  0
    price_limits {
      bid_price_start_min:  2
      bid_price_start_max:  2
      bid_price_min:        1
      bid_price_max:        19
      bid_ask_spread:       1
    }
    model_parameters {
      rise:                 2
      fall:                 2
      attrition:            6
      volatility:           0
    }
  }
}

# Models/configures the nation-specific bonuses with regard to
# trading, which in the original game only applies to the Dutch.
nation_advantage {
  english {
    # No bonuses/penalties.
    attrition_scale:   1.0
    sell_volume_scale: 1.0
    buy_volume_scale:  1.0
  }

  french {
    # No bonuses/penalties.
    attrition_scale:   1.0
    sell_volume_scale: 1.0
    buy_volume_scale:  1.0
  }

  spanish {
    # No bonuses/penalties.
    attrition_scale:   1.0
    sell_volume_scale: 1.0
    buy_volume_scale:  1.0
  }

  # Of the Dutch, the original game states that "Commodity prices
  # in Amsterdam do not collapse as quickly as in other European
  # ports and they recover more quickly.
  dutch {
    # This is the "recover more quickly" part. In this case, "re-
    # cover" means that the prices recover to values that are
    # typically favorable to players. In some cases that can mean
    # rise, and in others fall. Specifically, in the original
    # game the dutch have their "attrition" values scaled up, so
    # that, in the absence of trading with the new world, prices
    # naturally either rise or fall (depending on the sign of the
    # attrition) more quickly. This may at first seem more like a
    # disadvantage, but it is actually an advantage because the
    # sign of the attrition (in general) is chosen to make it fa-
    # vorable for the player. Thus, as mentioned, we multiply the
    # dutch's attrition value (keeping the same sign) by this
    # factor, which, in the original game appears to be
    # 1/(2/3)=1.5, since the price movements appear to happen in
    # about 2/3 the number of turns.
    attrition_scale: 1.5

    # This is the "do not collapse as quickly" part. In this
    # case, it refers only to price drops (not price rises) and
    # it appears to only apply when selling goods, not when at-
    # trition is applied (on goods with positive attrition,
    # meaning that they normally fall when left alone). Experi-
    # ments in the original game seem to indicate that when
    # selling goods in europe (by any nation), the volume sold is
    # scaled down by a factor of 2/3 before it is added to the
    # Dutch's net traffic volume. This results in taking 1.5
    # times the number of turns to cause a price drop when sell-
    # ing. Note that the "fall" parameter for each commodity does
    # not seem to be changed per se, since when commodities with
    # positive attrition (falling) are let to evolve (with the
    # Dutch's scaled attrition) the game appears to use the un-
    # modififed "fall" number.
    sell_volume_scale: 0.666666

    # In the original game, not even the dutch seem to get a
    # scaling on volume when buying.
    buy_volume_scale: 1.0
  }
}

# Depending on difficulty level, traffic volume changes (to all
# players) induced by a player (buy or sell) are scaled by these
# factors when adding them into the intrinsic volumes of all na-
# tions (including the player that initiated the trade). For the
# human player this effectively causes prices to not rise/fall as
# quickly on easier difficulty levels as a result of the player's
# trading.
#
# Note that this does not affect attrition in either direction,
# only to actual traffic from the new world.
#
# Non-human players get a different scale, but in the OG it does
# not seem to vary by difficulty level. It's hard to say whether
# the sub-unity non-human scale makes it more or less difficult
# for the player, since changing that parameter could both ben-
# efit and hinder the AI players. In fact, in the OG, it appears
# that this value is 66% on all difficulty levels, suggesting
# that the designers felt that it wasn't suitable to vary to make
# the game more or less difficult for the player.
difficulty_modifiers {
  discoverer {
    human_traffic_volume_scale:     0.666666
    non_human_traffic_volume_scale: 0.666666
  }
  explorer {
    human_traffic_volume_scale:     0.833333
    non_human_traffic_volume_scale: 0.666666
  }
  conquistador {
    human_traffic_volume_scale:     1.000000
    non_human_traffic_volume_scale: 0.666666
  }
  governor {
    human_traffic_volume_scale:     1.166666
    non_human_traffic_volume_scale: 0.666666
  }
  viceroy {
    human_traffic_volume_scale:     1.333333
    non_human_traffic_volume_scale: 0.666666
  }
}

# The OG's strategy guide describes the idea of "price groups,"
# where one price change in one commodity in the group affects
# the others. This price group model is quite different from the
# default model. This particular one governs the group consisting
# of rum, cigars, cloth, and coats.
processed_goods_model {
  price_min:    1   # ask
  price_max:    20  # ask
  rise_fall:    4
  volatility:   1
  target_price: 12  # ask

  # Since the commodities in a price group don't store their
  # equilibrium prices in the model (instead they have an in-
  # trinsic volume from which those are derived), the way that we
  # randomly set the processed goods' prices at the start of the
  # game is by randomly selecting the intrinsic volumes. These
  # will be selected through a uniform distribution over the
  # window dictated by the two parameters below. The "center" is
  # the center of the possible range, and the "window" is the
  # lengh of the range (which straddles the center). Note that
  # choosing uniformly over this interval reproduces the behavior
  # observed from the original game where the initial prices of
  # these commodities seems to follow something that looks like a
  # skewed binomial distribution with a center at around 11 and
  # which drops nearly to zero at around 8 and 15.
  random_init_center: 600
  random_init_window: 350
}
