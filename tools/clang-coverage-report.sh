#!/bin/bash
# ---------------------------------------------------------------
# Generate clang code coverage.
# ---------------------------------------------------------------
# This script takes coverage data generated by a clang-compiled
# binary and processes it into an html report.
#
# NOTE: This script is not meant to be run directly; it is typi-
# cally run from the build-and-run-coverage-report.sh script.
#
# ---------------------------------------------------------------
# Shell options.
# ---------------------------------------------------------------
set -e

# ---------------------------------------------------------------
# Imports.
# ---------------------------------------------------------------
source ~/dev/utilities/bashlib/util.sh

# ---------------------------------------------------------------
# Constants.
# ---------------------------------------------------------------
LLVM_BIN=~/dev/tools/llvm-current/bin
LLVM_PROFDATA="$LLVM_BIN/llvm-profdata"
LLVM_COV="$LLVM_BIN/llvm-cov"

PROFRAW_STEM=default
PROFRAW_DIR="."
PROFRAW_PATH="$PROFRAW_DIR/$PROFRAW_STEM.profraw"
PROFDATA_PATH="$PROFRAW_DIR/$PROFRAW_STEM.profdata"

# ---------------------------------------------------------------
# Args.
# ---------------------------------------------------------------
html_out="$1"; shift || true

# This can be either a file to emit coverage for, or a folder.
targets="$@"

# ---------------------------------------------------------------
# Validation.
# ---------------------------------------------------------------
usage() { die "usage: $0 <html-out> <target> [<targets>...]"; }

[[ -e "$PROFRAW_PATH" ]] \
  || die "profraw file $PROFRAW_PATH not found." \
         "Must run test binary first."

[[ -d src/base ]] \
  || die "This script should be run from the root of the rn folder."

[[ -z "$html_out" ]] && usage

[[ -z "$targets" ]] && {
  error "Must specify files or folders as arguments to limit the" \
        "coverage data.  By default it will produce coverage for" \
        "the entire source folder which is too big."
  usage
}

# ---------------------------------------------------------------
# Steps.
# ---------------------------------------------------------------
merge() {
  "$LLVM_PROFDATA" merge        \
    -sparse                     \
    "$PROFRAW_PATH"             \
    -o "$PROFDATA_PATH"
}

html_cov() {
  # NOTE: no quotes around targets.
  #
  # Add:
  #
  #   -show-branches=percent
  #
  # to show branches.
  #
  "$LLVM_COV" show                  \
    ./.builds/current/test/unittest \
    -instr-profile="$PROFDATA_PATH" \
    -format=html                    \
    $targets                        \
  > "$html_out"
}

rm_rds_profraw() {
  find "$1" -type f -name '*.profraw' | xargs rm -f
}

cleanup() {
  rm -f "$PROFRAW_PATH"
  rm -f "$PROFDATA_PATH"
  # Delete profraw files generated from running rds.
  rm_rds_profraw src
  rm_rds_profraw exe
  rm_rds_profraw test
  rm_rds_profraw assets
}

# ---------------------------------------------------------------
# main
# ---------------------------------------------------------------
main() {
  merge
  html_cov
  cleanup
}

main "$@"