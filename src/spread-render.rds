# ===============================================================
# spread-render.rds
#
# Project: Revolution Now
#
# Created by David P. Sicilia on 2025-01-20.
#
# Description: Rds definitions for the spread-render module.
#
# ===============================================================
# config
include "config/tile-enum-fwd.hpp"

# gfx
include "gfx/spread-algo.rds.hpp"
include "gfx/cartesian.hpp"
include "gfx/pixel.hpp"

# C++ standard library
include "<vector>"

namespace "rn"

# ---------------------------------------------------------------
# Spread labels.
# ---------------------------------------------------------------
sumtype.SpreadLabelPlacement {
  # This will put the label on the left side of the first tile in
  # the middle, but with the exact x coordinate tweaked depending
  # on the count and spacing of the icons in order to produce a
  # more polished look.
  left_middle_adjusted {},

  in_first_tile {
    placement 'gfx::e_cdirection',
  },
}

# When an option is not specified then a default value will be
# used, and those default values are chosen so as to provide sen-
# sible output that should be good in most cases (and roughly re-
# produce what the OG does).
struct.SpreadLabelOptions {
  # Foreground color, defaults to white.
  color_fg 'base::maybe<gfx::pixel>',
  # Background color, defaults to black.
  color_bg 'base::maybe<gfx::pixel>',
  # Placement defaults to the sw corner (NOTE: OG does nw).
  placement 'base::maybe<SpreadLabelPlacement>',
  # The padding is in addition to the one pixel of padding there
  # will naturally be around any font. Default value is 1,
  # whereas the OG has zero.
  text_padding 'base::maybe<int>',
}

sumtype.SpreadLabels {
  never {}, # default; should be first.
  always {},
  # Use some heuristics on a per-spread basis to determine
  # whether there should be a number or not.
  auto_decide {
    # If one spread gets a label then they all will.
    viral 'bool',
  },
}

# ---------------------------------------------------------------
# Tile render options.
# ---------------------------------------------------------------
struct.TileWithOptions {
  tile 'e_tile',
  greyed 'bool',
}

# ---------------------------------------------------------------
# Spreads of tiles.
# ---------------------------------------------------------------
# Overlays work by specifying a starting position in the spread,
# then all tiles from that point on in the spread will have the
# overlay. It seems a bit strange, but that's allows supporting
# all use cases for overlays used in the game (which are basi-
# cally in the colony view).
struct.TileOverlay {
  tile 'e_tile',
  starting_position 'int',
  # If labels are rendered for the spread containing this overlay
  # then they will use these options.
  label_opts 'SpreadLabelOptions',
  # Will override the lable if present; used for when the ren-
  # dered counts need to be lowered in order to fit in the avail-
  # able space.
  label_count 'base::maybe<int>',
}

struct.TileSpreadSpec {
  icon_spread 'Spread',
  tile 'e_tile',
  # If labels are rendered for this spread then they will use
  # these options.
  label_opts 'SpreadLabelOptions',
  # If this is set then it will override the count shown in the
  # label, if the label is shown. This is used for a couple of
  # purposes: 1) to represent progress indicators where we want
  # the spacing/algo done on the full count, but then we only
  # display a subset, and 2) in the case where rendered counts
  # need to be lowered in order to fit in the available space.
  label_count 'base::maybe<int>',
  # This can be used for e.g. a red X over each tile as would be
  # done in the colony view to represent shortages.
  overlay_tile 'base::maybe<TileOverlay>',
}

struct.TileSpreadSpecWithSourceSpec {
  algo_spec 'SpreadSpec',
  tile_spec 'TileSpreadSpec',
}

struct.TileSpreadSpecs {
  spreads 'std::vector<TileSpreadSpecWithSourceSpec>',
  # Should use the same one as was used in the input SpreadSpecs
  # for correct behavior.
  group_spacing 'int',
  label_policy 'SpreadLabels',
}

struct.ProgressTileSpreadSpec {
  source_spec 'ProgressSpreadSpec',
  progress_spread 'ProgressSpread',
  rendered_count 'int',
  tile 'e_tile',
  # If labels are rendered for this spread then they will use
  # these options.
  label_opts 'SpreadLabelOptions',
  # If this is set then it will override the count shown in the
  # label, if the label is shown. This is used to represent
  # progress indicators where we want the spacing/algo done on
  # the full count, but then we only display a subset. In that
  # case we want the label to represent the progress count and
  # not the total count.
  label_count 'base::maybe<int>',
  label_policy 'SpreadLabels',
}

struct.FixedTileSpreadSpec {
  tile 'e_tile',
  rendered_count 'int',
  spacing 'int',
}

# ---------------------------------------------------------------
# Render Plans.
# ---------------------------------------------------------------
struct.SpreadLabelRenderPlan {
  # Copied from input as-is.
  options 'SpreadLabelOptions',
  text 'std::string',
  # Bounds of the box, including padding.
  bounds 'gfx::rect',
}

struct.TileRenderPlan {
  tile 'e_tile',
  where 'gfx::point',
  is_overlay 'bool',
  is_greyed 'bool',
}

struct.TileSpreadRenderPlan {
  # This will be relative to the origin of the entire group if
  # there are multiple spreads involved.
  bounds 'gfx::rect',
  # These must be rendered in order.
  tiles 'std::vector<TileRenderPlan>',
  # There can be multiple labels e.g. in the case where a part of
  # the tiles have overlays, in which case both segments get
  # their own label.
  labels 'std::vector<SpreadLabelRenderPlan>',
}

# Final result which is directly renderable.
struct.TileSpreadRenderPlans {
  bounds 'gfx::size',
  plans 'std::vector<TileSpreadRenderPlan>',
}

struct.TileSpreadRenderShadow {
  offset 'int',
  color 'gfx::pixel',
}

struct.TileSpreadRenderOptions {
  # Index of tile to suppress. This is used to omit the drawing
  # of one of the tiles, which is useful if e.g. it is being
  # dragged and we want to omit drawing it but draw all other
  # tiles in their same positions.
  suppress 'base::maybe<int>',
  shadow 'base::maybe<TileSpreadRenderShadow>',
}
