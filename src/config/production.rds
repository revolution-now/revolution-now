# ===============================================================
# production.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-05-31.
#
# Description: Config info for colony production.
#
# ===============================================================
# ss
include "ss/colony-enums.rds.hpp"
include "ss/terrain-enums.rds.hpp"
include "ss/difficulty.rds.hpp"
include "ss/unit-type.rds.hpp"
include "ss/fathers.rds.hpp"

# refl
include "refl/enum-map.hpp"

# base
include "base/maybe.hpp"

# C++ standard library
include "<unordered_set>"

namespace "rn.config.production"

struct.IndoorProduction {
  # Amount produced per turn by a petty criminal working in an
  # indoor job (e.g. rum distiller).
  petty_criminal_base_production 'int',

  # Amount produced per turn by a native convert working in an
  # indoor job (e.g. rum distiller). In the original game this is
  # equivalent to a petty criminal.
  native_convert_base_production 'int',

  # Amount produced per turn by an indentured servant working in
  # an indoor job (e.g. rum distiller).
  indentured_servant_base_production 'int',

  # Amount produced per turn by a free colonist working in an in-
  # door job (e.g. rum distiller) or by an expert colonist
  # working a job that they are not an expert at.
  non_expert_base_production 'int',

  # Percent bonus when an expert colonist is working in an indoor
  # job matching their expertise (e.g. master run distiller
  # working on producing rum). In the original game this is 100,
  # meaning that it is a 100% bonus, meaning "multiply by 2."
  expert_bonus 'int',

  # William Penn crosses production bonus percent.
  # FIXME: move this to the founding fathers config.
  william_penn_crosses_bonus 'int',

  # Thomas Jefferson bells production bonus percent.
  # FIXME: move this to the founding fathers config.
  thomas_jefferson_bells_bonus 'int',

  # For a given indoor job this will give the corresponding ex-
  # pert colonist type.
  expert_for 'refl::enum_map<e_indoor_job, e_unit_type>',
}

sumtype.OutdoorJobBonus {
  none {},
  add {
    # In the original game, it seems that when bonuses are addi-
    # tive, they can sometimes have different values for experts
    # and non-experts.
    non_expert 'int',
    expert     'int',
  },
  mul {
    by 'int',
  },

  _features { validation, equality }
}

struct.NonResourceOverride {
  non_expert 'int',
  expert     'int',
  required_resources 'std::unordered_set<e_natural_resource>',

  # If the square has none of the above required resources then
  # it will produce something only if it is enabled in this map,
  # and the amount that it produces will be given by the numbers
  # above.
  allowed_with_no_resource 'refl::enum_map<e_terrain, bool>',
}

struct.FoundingFatherProductionBonus {
  father 'e_founding_father',
  bonus 'OutdoorJobBonus',
}

struct.OutdoorJobProduction {
  # In general the order in which these are applied matters be-
  # cause some of them are additive and some multiplicative. When
  # they are all additive, as in e.g. the case of farming in the
  # original game, the order does not matter. In the case of e.g.
  # cotton on prairie tiles, the original game appears to compute
  # in this order, where each is present:
  #
  #   1. base:        3
  #   2. resource:   x2
  #   3. plow:       +1
  #   4. river:      +1 (minor)
  #   5. expert:     x2
  #   6. fathers:    x2 (example for fur trappers)
  #
  # So let's say that we have an expert cotton planter working on
  # a square with prime cotton, a river, and plowed, we'd have:
  #
  #   production = ((3*2)+1+1)*2 = 16
  #
  # Note that none of these are mutually exclusive; i.e., when a
  # tile is eligible for both plow and river bonuses, they can
  # both be present and will be cumulative. In the original game,
  # it appears that when a square has a minor river that it can
  # also receive the road bonus, but when it has a major river it
  # either doesn't get the road bonus or gets a reduced road
  # bonus. To avoid that extra complexity, we just make them all
  # independent.
  minor_river_bonus 'OutdoorJobBonus',
  major_river_bonus 'OutdoorJobBonus',
  road_bonus        'OutdoorJobBonus',
  plow_bonus        'OutdoorJobBonus',
  expert_bonus      'OutdoorJobBonus',

  father_bonus      'base::maybe<FoundingFatherProductionBonus>',

  # If the worker is a native convert then its production will be
  # computed from that of a free colonist, but with this bonus
  # added. In the original game, this bonus is always +1 for
  # planting-based jobs as well as for fur trapping and fishing,
  # and is +0 for everything else. Note that this bonus is ap-
  # plied after all other bonuses, and is only applied if the
  # production value at that point is non-zero.
  native_bonus 'OutdoorJobBonus',

  # For ocean tiles.
  coast_bonus    'OutdoorJobBonus',

  resource_bonus 'refl::enum_map<e_natural_resource, OutdoorJobBonus>',

  # These are for a free colonist.
  base_productions 'refl::enum_map<e_terrain, int>',

  # When this has a value, it means that, when the tile has no
  # resource, the entire calculation will be completely over-
  # ridden by the numbers here. That means that what would other-
  # wise be the base production and various bonuses will not be
  # applied, with the exception of the Sons of Liberty
  # bonus/penalty. This is to allow reproducing the behavior of
  # some versions of the original game with regard to silver pro-
  # duction, which seems to follow all of the usual formulas but
  # only when a tile has a silver (or depleted silver), or min-
  # erals resource.
  non_resource_override 'base::maybe<NonResourceOverride>',
}

struct.ResourceDepletion {
  counter_limit 'int',

  counter_bump [[
    std::map<
      e_outdoor_job,
      std::map<
        e_natural_resource,
        int
      >
    >
  ]],
}

struct.OutdoorProduction {
  jobs 'refl::enum_map<e_outdoor_job, OutdoorJobProduction>',

  # Of the 8 tiles that border an ocean square, how many of them
  # (at least) have to be land in order for it to be considered a
  # "coast" (and thus recieve the associated fishing bonus).
  num_land_tiles_for_coast 'int',

  # For a given outdoor job this will give the corresponding ex-
  # pert colonist type.
  expert_for 'refl::enum_map<e_outdoor_job, e_unit_type>',

  depletion 'ResourceDepletion',
}

struct.CenterSquareProduction {
  # The original game seems to compute production values using a
  # free_colonist as a the model (generally; it tweaks those
  # values a bit, but not much). In particular, it never applies
  # the expert bonus and always takes the non-expert resource
  # bonuses where relevant. This allows changing that.
  is_expert 'bool',

  # These model what the original does. For some reason it only
  # appears to apply some bonuses when on the center square, and
  # does so differently between food and secondary.
  apply_river_bonus_on_food 'bool',
  apply_river_bonus_on_secondary 'bool',
  apply_road_bonus_on_food 'bool',
  apply_road_bonus_on_secondary 'bool',
  apply_plow_bonus_on_food 'bool',
  apply_plow_bonus_on_secondary 'bool',

  # It seems that in the original game, the base values of food
  # production (on the harder difficulty levels) are tweaked from
  # their standard values. Even on the easy difficulty levels, it
  # appears that the base values are still not their standard
  # values, but instead are computed from these viceroy-level
  # base values. This is a bit strange, since it prevents the
  # player from calculating center square production from the
  # standard terrain production docs, but perhaps was done for
  # game balancing.
  viceroy_base_food 'refl::enum_map<e_terrain, int>',

  # It appears that the original game uses a set of base produc-
  # tion values on the "conquistador", "governor", and "viceroy"
  # difficulty levels. Then the "explorer" values are those +1,
  # and the "discoverer" values are viceroy values +2. To empha-
  # size, these bonus are added to the values specified for the
  # viceroy level above.
  food_bonus_by_difficulty 'refl::enum_map<e_difficulty, int>',

  # The original game seems to selectively override the river
  # bonus on fur production in the center square. It is not clear
  # whether this is a bug or not. But one positive consequence is
  # that it prevents furs from dominating over ore when selecting
  # the secondary commodity on e.g. a boreal forest tile con-
  # taining a major river and minerals; in that case the fur pro-
  # duction would receive a river bonus of +4, putting it at
  # 3+4=7, whereas for ore it would be 1+3+2=6. By nurfing the
  # river bonus for fur we can prevent this.
  override_secondary_minor_river_bonus 'refl::enum_map<e_outdoor_commons_secondary_job, base::maybe<OutdoorJobBonus>>',
  override_secondary_major_river_bonus 'refl::enum_map<e_outdoor_commons_secondary_job, base::maybe<OutdoorJobBonus>>',

  # It appears that the original game that all difficulty levels
  # yield the same except for "discoverer", which gets +1.
  secondary_bonus_by_difficulty 'refl::enum_map<e_difficulty, int>',

  _features { validation, equality }
}

namespace "rn"

struct.config_production_t {
  # How many crosses are produced by a colony just by virtue of
  # it existing (i.e., with no churches or cathedrals)?
  base_crosses 'int',

  # FIXME: rename this to indoor.
  indoor_production 'config::production::IndoorProduction',

  # FIXME: rename this to outdoor.
  outdoor_production 'config::production::OutdoorProduction',

  # The number of items that are automatically produced by vir-
  # tual of a building existing. Most buildings have "zero" for
  # this.
  free_building_production 'refl::enum_map<e_colony_building, int>',

  # This describes the total bonus that a building gives you over
  # the base building. It is a percent increases. Typically a
  # second-level building with double output, in which case the
  # bonus would be a 100% increase, so this value would be 100
  # for that building. Note that, depending on context, the value
  # to which the percentage is applied here may or may not in-
  # clude the base/free production, and there may be further mul-
  # tiplier bonuses applied after this bonus, so in other words
  # this bonus doesn't necessarily have the final word in the
  # total production increase. Newspaper do seem to get applied
  # to the base production. Note that the original game appears
  # to round up on 1/2.
  # FIXME: move this into indoor production.
  building_production_bonus 'refl::enum_map<e_colony_building, int>',

  # A "factory bonus" is a bonus where, in addition to all of the
  # bonuses from lesser buildings, you also get a % increase in
  # your output without changing your input. So a Cigar Factory
  # could e.g. produce 15 cigars but consume only 10 tobacco.
  # FIXME: move this to indoor production.
  factory_bonus 'refl::enum_map<e_colony_building, int>',

  # Config for what and how much gets produced in the center
  # square. Note that the secondary good is selected by choosing
  # the good that yields most; it is not hard-coded in the config
  # for each terrain type.
  # FIXME: move this to outdoor production.
  center_square_production 'config::production::CenterSquareProduction',

  _features { validation, equality }
}

config.production {}
