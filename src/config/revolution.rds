# ===============================================================
# revolution.rds
#
# Project: Revolution Now
#
# Created by David P. Sicilia on 2025-04-12.
#
# Description: Config data for the revolution module.
#
# ===============================================================
# config
include "range-helpers.rds.hpp"

# ss
include "ss/difficulty.rds.hpp"
include "ss/revolution.rds.hpp"
include "ss/unit-type.rds.hpp"

# refl
include "refl/enum-map.hpp"

namespace "rn.config.revolution"

struct.Declaration {
  human_required_rebel_sentiment_percent [[
    refl::enum_map<e_difficulty, IntPercent>
  ]],

  ai_required_number_of_rebels [[
    refl::enum_map<e_difficulty, int>
  ]],

  _features { equality, validation }
}

struct.RefTargetRatios {
  ratio 'refl::enum_map<e_expeditionary_force_type, IntPercent>',
  _features { equality, validation }
}

struct.RefForces {
  initial_forces 'refl::enum_map<e_difficulty, ExpeditionaryForce>',
  target_ratios 'RefTargetRatios',
  allowed_unit_counts_per_deployment 'IntRange',
  strong_unit_wave_threshold 'int',
  _features { equality, validation }
}

struct.InterventionForces {
  unit_counts 'refl::enum_map<e_difficulty, InterventionForce>',
  bells_needed 'refl::enum_map<e_difficulty, int>',
  _features { equality, validation }
}

struct.RoyalMoney {
  constant_per_turn 'refl::enum_map<e_difficulty, int>',
  threshold_for_new_ref 'int',
}

struct.Uprising {
  unit_type_probabilities 'std::vector<std::pair<e_unit_type, int>>',

  _features { equality, validation }
}

namespace "rn"

struct.config_revolution_t {
  declaration 'config::revolution::Declaration',
  ref_forces 'config::revolution::RefForces',
  intervention_forces 'config::revolution::InterventionForces',
  royal_money 'config::revolution::RoyalMoney',
  uprising 'config::revolution::Uprising',
}

config.revolution {}
