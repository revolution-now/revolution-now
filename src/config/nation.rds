# ===============================================================
# nation.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-05-05.
#
# Description: Nation-specific config info.
#
# ===============================================================
# gs
include "ss/nation.rds.hpp"
include "ss/unit-type.rds.hpp"

# gfx
include "gfx/pixel.hpp"

# refl
include "refl/enum-map.hpp"

namespace "rn"

struct.SpecialAbility {
  # This is a number that will be multiplied by the total number
  # of crosses otherwise needed to attract a new immigrant, then
  # round to the nearest integer. If this is zero then no crosses
  # will be needed, and thus a new immigrant will appear each
  # turn regardless.
  crosses_needed_multiplier 'double',

  starting_ship 'e_unit_type',

  # What kind of pioneer unit does the nation start with.
  starting_pioneer 'e_unit_type',

  # Multipler that scales the rate at which native alarm grows.
  # If this is less than 1.0 then it grows more slowly. If this
  # is zero then there is no escalation of alarm.
  native_alarm_multiplier 'double',

  # Multipler that scales the delta of european price fluctua-
  # tions. If this is less than 1.0 then it dampens those shifts.
  # If it is zero then there is no price movement.
  price_movement_multiplier 'double',

  # This is a % bonus that is factored into the combat analysis
  # when attacking native settlements. Zero means no bonus.
  native_settlement_attack_bonus 'int',

  _features { validation, equality }
}

struct.Nationality {
  enum_val 'e_nation',

  # The ____ have captured the colony of...
  display_name_pre_declaration 'std::string',

  # The king of ____ has declared...
  country_name 'std::string',

  # The old world port city is named ___.
  harbor_city_name 'std::string',

  # The default suggested name for the new world.
  new_world_name 'std::string',

  # ____ forces have captured...
  possessive_pre_declaration 'std::string',

  # __ <possessive> ship has been sunk...
  article 'std::string',

  # Must be unique for each nation.
  flag_color 'gfx::pixel',
}

struct.config_nation_t {
  nations 'refl::enum_map<e_nation, Nationality>',

  # Describes the special abilities that each nation has.
  abilities 'refl::enum_map<e_nation, SpecialAbility>',
}

config.nation {}