# ===============================================================
# natives.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-10-29.
#
# Description: Config info for the natives.
#
# ===============================================================
# config
include "range-helpers.rds.hpp"
include "tile-enum.rds.hpp"

# ss
include "ss/colony-enums.rds.hpp"
include "ss/native-enums.rds.hpp"
include "ss/settings.rds.hpp"
include "ss/unit-type.rds.hpp"

# cdr.
include "cdr/ext-base.hpp"
include "cdr/ext-builtin.hpp"
include "cdr/ext-std.hpp"

# gfx
include "gfx/cartesian.hpp"
include "gfx/coord.hpp"
include "gfx/pixel.hpp"

# refl
include "refl/enum-map.hpp"

# C++ standard library
include "<string>"

namespace "rn"

# Size of the land around the dwelling owned by a dwelling.
enum.e_dwelling_radius {
  small,
  large,
}

# This indicates how primitive or advanced a tribe is. The OG
# seems to treat all of the semi-nomadic tribes the same and all
# of the agrarian tribes the same at least with regard to ques-
# tions of level, but it differentiates between the Aztec ("ad-
# vanced") and Inca ("civilized"). The Inca are considered a bit
# more advanced.
enum.e_native_level {
  semi_nomadic,
  agrarian,
  advanced,  # Aztec only in OG.
  civilized, # Inca only in OG.
}

# Note that the negative outcome "target practice" is not here,
# since that is always computed from the alarm rate of the na-
# tives.
enum.e_speak_with_chief_result {
  none,
  gift_money,
  tales_of_nearby_lands,
  promotion,
}

namespace "rn.config.natives"

struct.UnitType {
  type 'e_native_unit_type',
  name 'std::string',
  movement_points 'int',
  combat 'int',
  tile 'e_tile',
  nat_icon_front 'bool',
  nat_icon_position 'e_direction',
}

struct.DwellingType {
  radius 'e_dwelling_radius',
  name_singular 'std::string',
  name_plural 'std::string',
}

struct.Tribe {
  name_singular 'std::string',
  name_plural 'std::string',
  name_posessive 'std::string',

  level 'e_native_level',

  max_population 'int',
  max_population_capital 'int',

  dwelling_tile 'e_tile',
  flag_color 'gfx::pixel',
}

struct.AlarmLandGrab {
  # Number of alarm points added to tribal alarm each time the
  # player steals a tile of native-owned land without paying.
  tribal_increase 'refl::enum_map<e_difficulty, int>',

  # The alarm increase is scaled by this amount if the square
  # contains a prime resource. Appears to be 2.0 in the OG.
  prime_resource_scale 'double',

  # This factor is applied for square of distance away from the
  # dwelling to make the alarm delta decrease in magnitude with
  # distance. Appears to be about .6 in the OG. This only applies
  # to cities which have an owned-land radius larger than one.
  distance_factor 'double',

  _features { equality, validation }
}

struct.Alarm {
  # If the effective alarm of a dwelling is larger than this then
  # they will not teach. Note that this is only relevant when not
  # at war (when at war, they will never teach).
  max_dwelling_alarm_for_teaching 'int',

  # Describes how alarm increases when the player takes a
  # native-owned land tile without paying for it. Note that this
  # only applies after having met the tribe.
  land_grab 'config::natives::AlarmLandGrab',

  # Each tribe's initial alarm when meeting a new European na-
  # tion.
  starting_tribal_alarm 'refl::enum_map<e_tribe, int>',

  # When the player does an action against a dwelling it gener-
  # ally will increase tribal alarm. However, if that dwelling is
  # a capital then the alarm increase will be scaled up by this
  # amount.
  tribal_alarm_scale_for_capital 'double',

  # When we attack a brave on the map the tribe's alarm will in-
  # crease by this amount.
  tribal_alarm_increase_from_attacking_brave 'int',

  # When we attack a dwelling (that has no brave sitting on top
  # of it) the tribe's alarm will increase by this amount.
  tribal_alarm_increase_from_attacking_dwelling 'int',

  # The alarm level of all tribes (that the player has met) is
  # reduced to this level after acquiring the founding father
  # (mother?) Pocahontas, though this is a one-time effect.
  tribal_alarm_after_pocahontas 'int',

  # After the player has Pocahontas then an increase in tribal or
  # dwelling alarm will be scaled by this value (.50 in the OG).
  tribal_alarm_increase_scale_after_pocahontas 'double',

  # The alarm level of a tribe is reduced to this level after
  # burning the capital. In the event that the alarm is already
  # lower than this (very unlikely) it won't be raised.
  tribal_alarm_after_burning_capital 'int',
}

struct.DwellingExpertise {
  # When we are computing the dwelling expertise we need to com-
  # pute the production quantity of each outdoor job on each sur-
  # rounding tile. This map determines whether we should do that
  # assuming an expert (true) or a free colonist (false). This
  # makes a difference because it will change the relative pro-
  # portions of produced quantities from the various jobs and
  # thus change the weights.
  production_from_expert 'refl::enum_map<e_outdoor_job, bool>',

  # After the base weights are computed based on production vol-
  # ume, they will be further scaled by these values to change
  # the probability of the various outcomes.
  scale_factors 'refl::enum_map<e_native_level, refl::enum_map<e_native_skill, double>>',

  # After all of the outdoor production-based weights are com-
  # puted the probability of the fur trading and scouting exper-
  # tises will still be zero because they are not derived from
  # outdoor production. So fur trading and scouting weights will
  # be generated that are equal to the weight of fur trapping
  # multiplied by these fractions.
  fur_trader_fraction 'double',

  # After all of the production-based weights are computed the
  # probability of the scouting expertise will still be zero be-
  # cause it is not derived from production. So the a scouting
  # weight will be generated that is equal to T*F*S, where T is
  # the sum of all weights, F is the fraction ([0,1]) of sur-
  # rounding tiles that are forested (since the OG seems to only
  # teaching scouting when the dwelling is surrounded one or more
  # forested tiles) and S is the below scale factor that will
  # normally be larger than one.
  seasoned_scout_scale 'double',
}

struct.LandPrices {
  # The price demanded by a native tribe for a tile is computed
  # as follows.
  #
  # * There is a base price that is computed based on tribe
  #   level, difficulty level, and the number of colonies that
  #   the player has:
  #
  #     base price = B + floor(C/2)*IC + L*IL + D*ID + P*IP
  #
  #   where:
  #
  #     B:  anchor price, 65 in OG.
  #     IC: increment per two colonies, 32.5 in OG.
  #     C:  min( #colonies of player, MC ).
  #     MC: Number of colonies beyond which the base price no
  #         longer increases with additional colonies. 6 in OG.
  #     IL: increment per tribe level, 32.5 in OG.
  #     L:  tribe level, starting at zero (nomadic, agrarian,
  #         aztec, inca).
  #     ID: increment per difficulty level, 65 in OG.
  #     D:  difficulty level, starting at zero.
  #     IP: increment per land square already acquired from
  #         this tribe via payment. 32.5 in OG.
  #     P:  number of land squares acquired from this tribe
  #         via payment.
  #
  # Then there are a series of multiplicative modifiers:
  #
  # * When a square has a prime resource on it. There do not seem
  #   to be any other modifiers having to do with terrain type.
  # * When the dwelling owning the tile is a capital.
  # * The price increases the angrier the tribe. Through this
  #   mechanism, the price can increase all the way up to 4x. The
  #   tribal anger multiplier is (1+n), where n is an integer
  #   that increases as the tribal anger increases and goes from
  #   [0,4]. The dwelling anger does not seem to affect this.
  # * When the tile is not adjacent to the dwelling. The "dis-
  #   tance" to the tile in question is not the pythagorean dis-
  #   tance, but the square around the dwelling in which the tile
  #   lives. So immediately adjacent would be m=0, the square
  #   around that (5x5) would be m=1, etc.

  # B above. Anchor price. As can be seen from the base price
  # formula, this is the base price of a tile for a semi-nomadic
  # tribe on the discoverer difficulty level when the player has
  # no colonies. 65 in OG.
  anchor_price 'double',

  # IC above. 32.5 in OG.
  increment_per_two_colonies 'double',

  # MC above. 6 in OG.
  max_colonies_for_increase 'int',

  # IL above. 32.5 in OG.
  increment_per_tribe_level 'double',

  # ID above. 65 in OG.
  increment_per_difficulty_level 'double',

  # IP above. 32.5 in OG.
  increment_per_paid_land_square 'double',

  # Multiplicative bonus applied when the tile has a prime re-
  # source on it.  2.0 in OG.
  bonus_prime_resource 'double',

  # Multiplicative bonus applied when dwelling that owns the tile
  # is a capital. 1.5 in OG.
  bonus_capital 'double',

  # The tribal anger multiplier is given by (1+n), where n goes
  # from zero up to this value inclusive. 3 in OG.
  tribal_anger_max_n 'int',

  # The multiplier is .9^m, where m=0 for adjacent squares, m=1
  # for outter square, and m=2 for outter corner squares and be-
  # yond.
  distance_exponential 'double',

  _features { validation, equality }
}

struct.SpeakWithChief {
  positive_outcome_weights 'refl::enum_map<e_speak_with_chief_result, int>',

  gift_range 'refl::enum_map<e_native_level, config::IntRange>',

  # This is the range wherein a scout will be eliminated with a
  # certain probability. Below this range it will never happen
  # and above this range it will always happen. Within the range,
  # the probability goes from 0% to 100% at the lower and upper
  # limits, respectively.
  alarm_range_for_target_practice 'config::IntRange',

  # This is the length of the side of the large square of tiles
  # that will be revealed to the player; that square will be cen-
  # tered on the dwelling tile.
  tales_of_nearby_land_size 'int',

  # If the number of non-visible tiles in the "tales of nearby
  # land" radius is less than this number, then the chief will
  # not tell tales of nearby lands.
  min_invisible_tiles_for_tales 'int',

  _features { equality, validation }
}

struct.NativeSkill {
  display_name 'std::string',
}

struct.TreasureYield {
  # Prior to obtaining Hernan Cortes, a treasure is not guaran-
  # teed when destroying a native dwelling. In that case, this
  # gives the probability (which, again, effectively becomes 1.0
  # after obtaining Cortes).
  probability 'double',

  # If receiving a treasure, the amount will be chosen uniformly
  # over this range.
  range 'config::IntRange',

  # The treasure amount will be rounded to the nearest multiple
  # of this.
  multiple 'int',
}

struct.Treasure {
  yield 'refl::enum_map<e_native_level, config::natives::TreasureYield>',

  # When receiving a treasure, the amount is scaled up by this
  # factor after Cortes is obtained.
  cortes_amount_scale 'double',

  # When receiving a treasure, the amount is scaled up by this
  # amount if the dwelling is the capital.
  capital_amount_scale 'double',
}

namespace "rn"

struct.config_natives_t {
  unit_types 'refl::enum_map<e_native_unit_type, config::natives::UnitType>',

  dwelling_types 'refl::enum_map<e_native_level, config::natives::DwellingType>',

  tribes 'refl::enum_map<e_tribe, config::natives::Tribe>',

  # Each camp/village has a couple pixels of color (matching the
  # flag color of the tribe) to indicate their tribe. They can be
  # single pixels, lines, or rects. These give the rects that
  # should be filled in relative to the upper left corner of the
  # camp/village sprite.
  flag_rects 'refl::enum_map<e_native_level, std::vector<gfx::rect>>',

  # Describes behaviors having to do with native alarm level.
  # Note that there is dwelling-level alarm and tribal alarm, and
  # the names will specify which one is being referred to.
  alarm 'config::natives::Alarm',

  # Configures how each dwelling is assigned an expertise for
  # teaching.
  dwelling_expertise 'config::natives::DwellingExpertise',

  # Determines how the price demanded by the natives for their
  # land is computed.
  land_prices 'config::natives::LandPrices',

  # Configures what happens when a scout enters a native dwelling
  # and asks to speak with the chief.
  speak_with_chief 'refl::enum_map<e_scout_type, config::natives::SpeakWithChief>',

  native_skills 'refl::enum_map<e_native_skill, config::natives::NativeSkill>',

  # Configures the nature of the treasure that yields from de-
  # stroying a native dwelling.
  treasure 'config::natives::Treasure',

  _features { equality, validation }
}

config.natives {}
