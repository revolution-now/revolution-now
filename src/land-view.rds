# ===============================================================
# land-view.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2021-07-21.
#
# Description: Public RDS definitions for the land-view module.
#
# ===============================================================
# Revolution Now
include "colony-id.hpp"
include "command.rds.hpp"
include "unit-id.hpp"

# C++ standard library
include "<vector>"

namespace "rn"

sumtype.LandViewPlayerInput {
  # Player clicked on a colony. It is important that this be a
  # command sent back to the caller of the land-view module (as
  # opposed to the land-view input processor coroutine just
  # showing the colony window itself) because it is possible that
  # a user might change the orders of a unit in the colony view,
  # e.g. they could fortify the unit that is currently asking for
  # commands, then upon closing the colony view we'd be a bad
  # state (a fortified unit asking for commands). But by sending
  # this back to the turn processor, it can handle that issue and
  # we don't have that problem.
  colony {
    id 'ColonyId',
  },

  # Show the harbor view. We could handle this theoretically di-
  # rectly in the land-view module, but it seems cleaner (depen-
  # dency wise) and more consistent (with e.g. the `colony` com-
  # mand above) that we just let the turn module handle it.
  european_status {},

  # Player has given a command to a unit.
  give_command {
    cmd 'command',
  },

  # Prioritize these units and make them ask for commands now,
  # assuming that they have not used their turn. This needs to be
  # a vector so that if there are multiple, then they can all be
  # prioritized before the first of them starts asking for or-
  # ders.
  prioritize {
    units 'std::vector<UnitId>',
  },

  # When at the end of a turn, this will advance to the next
  # turn. It is equivalent to clicking on "end of turn".
  next_turn {},

  # When the user hits escape this will be sent.
  exit {},
}
