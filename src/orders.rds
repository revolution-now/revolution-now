# ===============================================================
# orders.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2020-11-13.
#
# Description: RDS definitions for the orders module.
#
# ===============================================================
# ss
include "ss/unit-id.hpp"

# gfx
include "gfx/coord.hpp"

# C++ standard library
include "<vector>"

namespace "rn"

struct.OrdersHandlerRunResult {
  # Was the order carried out or not.
  order_was_run 'bool',

  # Regardless of the value of `order_run`, was there a coroutine
  # suspension during the process (other than during an anima-
  # tion)? This is basically used to infer whether the user was
  # prompted for anything during the process, which is useful to
  # know in order for the caller to have a polished user inter-
  # face.
  suspended 'bool',

  # Any units that need to be prioritized (in the sense of asking
  # for orders) after this order has been carried out. An example
  # of this would be after units make landfall from a ship, it is
  # natural for them to ask for orders right away.
  units_to_prioritize 'std::vector<UnitId>',
}

# An `orders_t` is a general term describing what the player pro-
# poses that a unit do when the unit asks the player. Roughly
# speaking, it captures the input that the player gives when the
# unit is waiting for orders. This could include "wait", "goto
# tile X", "move to tile X", "forfeight movement points", "plow
# square", "build colony". orders_t only represent what the
# player has proposed, and so it makes sense to talk about orders
# that are not permitted. For example, the player might give or-
# ders to a unit to "move left", but doing so might cause a land
# unit to go into a sea square without a ship, which would not be
# allowed. In that case, the orders are not allowed.
sumtype.orders {
  wait      {},
  forfeight {},
  build     {},
  road      {},
  plow      {},
  fortify   {},
  sentry    {},
  disband   {},
  dump      {},
  move      { d 'e_direction' },
}
