# ===============================================================
# land-view-anim.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2023-01-09.
#
# Description: Rds definitions for the land-view-anim module.
#
# ===============================================================
# Revolution Now
include "maybe.hpp"
include "physics.hpp"
include "visibility.rds.hpp"

# config
include "config/tile-enum-fwd.hpp"

# ss
include "ss/dwelling-id.hpp"
include "ss/map-square.rds.hpp"
include "ss/native-enums.rds.hpp"
include "ss/unit-id.hpp"
include "ss/unit-type.rds.hpp"

# gfx
include "gfx/coord.hpp"

# C++ standard library
include "<vector>"

namespace "rn"

struct.UnitSlide {
  direction 'e_direction',
  percent 'double',
  percent_vel 'DissipativeVelocity',
}

# These are animation primitives. A unit "move" is a slide, and a
# unit attack sequence is constructed from a slide + depixela-
# tion.
sumtype.UnitAnimationState {
  # This will draw the unit in front all other units and
  # colonies, with the exception of units that are being animated
  # in some other way, which will always go on top.
  front {},
  hide {},
  blink {
    visible 'bool',
  },
  slide {
    slide 'UnitSlide',
  },
  translocate {
    target 'gfx::point',
  },
  talk {
    slide 'UnitSlide',
  },
  depixelate_euro_unit {
    stage 'double',
    # If we're depixelating to another unit this will have a
    # value; otherwise we are depixelating to nothing.
    target 'maybe<e_unit_type>',
  },
  depixelate_native_unit {
    stage 'double',
    # If we're depixelating to another unit this will have a
    # value; otherwise we are depixelating to nothing.
    target 'maybe<e_native_unit_type>',
  },
  # Start from nothing and gradually reveal the tile.
  enpixelate_unit {
    stage 'double',
  },
}

sumtype.ColonyAnimationState {
  depixelate {
    stage 'double',
  },
  hide {},
}

sumtype.DwellingAnimationState {
  depixelate {
    stage 'double',
  },
  hide {},
}

struct.LandscapeAnimReplacementState {
  # This will cause the landscape_anim_replace buffer to be ren-
  # dered (once) with the replaced tiles and overlayed on top of
  # the landscape buffer, replacing it for the tiles in question
  # (and their immediate surroundings).
  needs_rendering 'bool', # See comment above.
  # These are the tiles to redraw, which include not only the
  # overridden ones but also their surroundings.
  redrawn 'std::vector<Coord>',
  # This is the visibility context in which the redrawn tiles are
  # redrawn. This allows e.g. controlling whether we render a
  # tile as if there is a dwelling present or not.
  overrides 'VisibilityOverrides',
}

struct.LandscapeAnimEnpixelationState {
  # This will cause the landscape_anim_enpixelate buffer to be
  # rendered (once) with the replaced tiles, then the uniform de-
  # pixelation stage for rendering the landscape_anim buffer will
  # be ramped down from 1.0 to 0, gradually replacing the con-
  # tents of the landscape buffer with the landscape_anim buffer.
  #
  # This flag is enabled for one frame to get the renderer to
  # render the buffer once, then it is turned off for the rest of
  # the animation since the animation being done is the pixela-
  # tion of the entire landscape_anim buffer, which is controlled
  # via a uniform.
  needs_rendering 'bool',
  stage 'double',
  # These are the tiles to redraw, which include not only the
  # overridden ones but also their surroundings.
  redrawn 'std::vector<Coord>',
  # This is the visibility context in which the redrawn tiles are
  # redrawn. This allows e.g. controlling whether we render a
  # tile as if there is a dwelling present or not.
  overrides 'VisibilityOverrides',
}
