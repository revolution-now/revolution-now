# ===============================================================
# spread.rds
#
# Project: Revolution Now
#
# Created by David P. Sicilia on 2025-01-12.
#
# Description: Rds definitions for the spread module.
#
# ===============================================================
# config
include "config/tile-enum-fwd.hpp"

# gfx
include "gfx/cartesian.hpp"
include "gfx/pixel.hpp"

# C++ standard library
include "<vector>"

namespace "rn"

# ---------------------------------------------------------------
# General.
# ---------------------------------------------------------------
struct.IconSpreadSpec {
  count 'int',
  width 'int',
}

struct.IconSpreadSpecs {
  bounds 'int',
  specs 'std::vector<IconSpreadSpec>',
  group_spacing 'int',
}

struct.IconSpread {
  real_count 'int',
  # NOTE: this may be different than the real count that was
  # input in IconSpreadSpec; this count is for rendering icons
  # only, but any labels should use the real count.
  rendered_count 'int',
  spacing 'int',
  width 'int',  # icon width from input.
}

struct.IconSpreads {
  spreads 'std::vector<IconSpread>',
  # This may not be the same as what was input, so this one
  # should always be used for rendering.
  group_spacing 'int',
}

# ---------------------------------------------------------------
# Spread labels.
# ---------------------------------------------------------------
# This struct is designed so that the default constructed value
# will provide sensible defaults that should be good in most
# cases (and reproduce what the OG does).
struct.SpreadLabelOptions {
  # Foreground color defaults to 0xffffff.
  color_fg 'base::maybe<gfx::pixel>',
  # Background color defaults to 0x000000.
  color_bg 'base::maybe<gfx::pixel>',
  # Placement defaults to the sw corner.
  placement 'base::maybe<gfx::e_cdirection>',
  # The padding is in addition to the one pixel of padding there
  # will naturally be around any font. Default value is 1.
  text_padding 'base::maybe<int>',
}

struct.SpreadLabelRenderPlan {
  options 'SpreadLabelOptions',
  text 'std::string',
  p 'gfx::point',
}

# ---------------------------------------------------------------
# Spreads of tiles.
# ---------------------------------------------------------------
struct.TileSpread {
  icon_spread 'IconSpread',
  tile 'e_tile',
  # x coordinate relative to sprite origin containing the first
  # row with at least one non-transparent pixel.
  opaque_start 'int',
  # When this is omitted there will be no label. So if you want a
  # label then it has to have a value, but it is recommended to
  # let that value be default constructed since that will yield
  # the options that are desired most of the time.
  label 'base::maybe<SpreadLabelOptions>',
}

struct.TileSpreads {
  spreads 'std::vector<TileSpread>',
  group_spacing 'int',
}

struct.TileSpreadRenderPlan {
  tiles 'std::vector<std::pair<e_tile, gfx::point>>',
  labels 'std::vector<SpreadLabelRenderPlan>',
}
