# ===============================================================
# vertex.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-03-07.
#
# Description: Rds definitions for the vertex module.
#
# ===============================================================
# gl
include "gl/attribs.hpp"

namespace "rr"

# TODO: to avoid wasting space on padding, these fields should be
# sorted in terms of largest first.
struct.GenericVertex {
  # The type of object that this vertex is a part of.  Possible
  # value are:
  #
  #  0. Sprite. This triangle will be filled in with a sprite
  #     from the texture atlas as-is.
  #
  #  1. Solid rectangle. This triangle will be filled in with a
  #     solid color.
  #
  #  2. Stencil. This triangle is a sprite that will be drawn as
  #     such (respecting transparency), but all pixels in the
  #     sprite that are a key color will be replaced by pixels of
  #     an alternate sprite (specified in the atlas via the
  #     atlas_target_offset) with alpha multiplication.
  #
  #  The above options should be in order of decreasing probabil-
  #  ity, that way most shaders can return early most of the time
  #  and won't spend time testing for unlikely branches.
  type 'int32_t',

  # Boolean flags. 0 is least significant bit.
  #
  #   Bit  Meaning
  #   ==========================================================
  #   0    Color cycling. When this is zero color cycling is
  #        off. When it is non-zero then color cycling is on,
  #        and the cycling animation stage will be taken from
  #        the corresponding uniform.
  #
  #   1    Use camera. When true, will subject the vertices to
  #        the "camera" uniform, which means translation of
  #        position and zoom, in the vertex shader. This is
  #        different from the `translation` and `scale`
  #        attributes above in that those allow different values
  #        per vertex. If both the camera is enabled and the
  #        per-vertex scale/translation are specified, then the
  #        latter is applied first, then the former.
  #
  #   2    Desaturate.  When true, the fragment shader will, as
  #        a final step, fully desaturate the color.
  #
  #   3    Fixed color. When this is on, the rgb values in the
  #        fixed_color field will be used to replace the final
  #        rgb values of the color, before desaturation is
  #        applied.
  #
  #   4    Uniform depixelation. Apply to the final result a
  #        depixelation with the stage given by the global
  #        depixelation stage uniform.
  #
  flags 'uint32_t',

  # General integral parameter:
  #   * When color cycling is on, this selects which array is used to
  #   * select the target colors.
  aux_idx 'int32_t',

  # Depixelation. This triangle will have individual pixels ran-
  # domly removed depending on the stage of the animation, which
  # is given by the z value of this parameter, and the inversion
  # flag which is given by the w. If inversion is false then
  # stage=0 means no depixelation and 1.0 means full depixela-
  # tion. If the inversion flat is true then the interpretation
  # of the stage is flipped so that stage=0 means full depixela-
  # tion and stage=1.0 means no depixelation. Note that inver-
  # sion=true is not the same as doing stage=1.0-stage, and that
  # is because the set of pixels e.g. in the range [0,.1] is dif-
  # ferent from those in [.9,1]. So you use the inversion flag
  # when you want to invert the stage of each pixel in the anima-
  # tion. This used to implement the depixelation of one image to
  # another; the source will have its stage move from 0->1 with
  # inversion=false, and the target image will have its stage
  # move also from 0->1 but with inversion=true. That way, each
  # time a pixel is removed from the source image, that same
  # pixel will be added to the target image.
  #
  # We need to make sure that the depixelation animation gets
  # rendered correctly even as the square being depixelated moves
  # around on screen. That is a challenge because the depixela-
  # tion is governed by hashing the screen coordinate. To support
  # this we use the xy coordinates of this vector.
  #
  # The xy component specifies a reference point ("hash anchor")
  # which is a screen/game coordinate that moves with the square
  # being rendered, such that the distance between this coordi-
  # nate a given vertex on the square remains fixed even as that
  # square moves around on screen. For example, this could be the
  # screen coordinate of the upper left corner of the sprite
  # being depixelated. This is used in the depixelation hashing
  # algorithm to make the hashing values independent of where the
  # square is located on screen. This way, if something is depix-
  # elating, the animation proceeds properly even if the square
  # is simultaneously moving. It can be an arbitrary position
  # relative to the square, but it would usually be the upper
  # left corner.
  #
  # This is a flat vertex attribute, meaning that it must be the
  # same for all vertices in the square.
  depixelate 'gl::vec4',

  # Specifies how the depixelation stage should vary across the
  # triangle. The zw components form slopes, thus the depixela-
  # tion stage will vary like a 2d plane. The xy components are
  # the anchor point from which the base value should be extrapo-
  # lated. In general this can be different from the depixelation
  # anchor.
  depixelate_stages 'gl::vec4',

  # Position of the vertex in game coordinates, i.e. where one
  # unit corresponds to one logical pixel and where the origin is
  # at the upper left of the screen and y increases downward.
  position 'gl::vec2',

  # For triangles that get filled in with a texture, this will be
  # the coordinates of the vertex in the texture atlas.
  atlas_position 'gl::vec2',

  # This is a flat vertex attribute that gives the rect (xyzw of
  # the vec4 <==> xywh of the rect) of the sprite in the atlas so
  # that the atlas position can be clamped within the square de-
  # fined by these two points. This is needed to prevent the ap-
  # pearance of unsightly artifacts on screen when sprites
  # (copied from the atlas) are drawn with zoom/scaling; in such
  # cases it occasionally happens that rounding/interpolation of
  # the atlas coordinate (at the boundary of the sprite) ends up
  # just outside of the sprite in the atlas, and we end up sam-
  # pling points in the atlas that are not in the sprite.
  atlas_rect 'gl::vec4',

  # For stencil types this points to the alternate texture in the
  # atlas that will be used for pixels of the key color.
  atlas_target_offset 'gl::vec2',

  # For stencils this will be the key color.
  stencil_key_color 'gl::color',

  # For a solid-color vertex this will be the color, alpha in-
  # cluded.
  #
  # If the fixed_color flag is on then the rgb components will be
  # used to replace the final color, retaining the original alpha
  # (i.e., the alpha in this field is ignored). This is only
  # meaningful to use for non solid-color vertices.
  fixed_color 'gl::color',

  # The final pixel color will have its alpha multiplied by this
  # value (no matter how it was produced). Should be in [0, 1].
  alpha_multiplier 'float',

  # This is a rescaling; the `position` attribute will be multi-
  # plied by this value. A value of 1.0 is a no-op.
  scaling 'float',

  # This is a translation; the `position` attribute will be added
  # to this value after scaling. A value of 0.0 is a no-op.
  translation 'gl::vec2',

  # Need this in all vertex structs since OpenGL needs to have
  # the offsets of each member of the struct.
  _features { equality, offsets }
}
