# ===============================================================
# dwelling.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-10-30.
#
# Description: Rds definitions for the dwelling module.
#
# ===============================================================
# ss
include "ss/commodity.rds.hpp"
include "ss/dwelling-id.hpp"
include "ss/nation.rds.hpp"
include "ss/native-enums.rds.hpp"
include "ss/unit-classes.rds.hpp"
include "ss/unit-type.rds.hpp"

# gfx
include "gfx/coord.hpp"

# refl
include "refl/enum-map.hpp"

namespace "rn"

struct.DwellingTradingState {
  # TODO: not sure yet how this needs to look.
  seeking_primary 'e_commodity',
  seeking_secondary_1 'e_commodity',
  seeking_secondary_2 'e_commodity',
}

# Describes the relationship of a single dwelling with a nation.
struct.DwellingRelationship {
  # According to the manual there is both tribe-level anger and
  # dwelling-level anger (alarm). According to the manual:
  # "Overall tribal anger is affected by direct action you take
  # against the Indians. Alarm in individual settlements is af-
  # fected not by direct action, but by indirect pressures such
  # as your proximity to that settlement, the size of your
  # colony, the presence of weapons, and so on."
  #
  # This number is in [0, 99], with 99 being most alarmed. The
  # effective alarm of a dwelling must take into account both
  # this number and the tribal level anger.
  #
  # TODO: The manual seems to mention that there is an alarm
  # level called "happy" that is superior to "content"; in that
  # case, we might want to start this off as non-zero.
  dwelling_only_alarm 'int',

  # This is so that the player can't keep meeting with the chief
  # and receiving gifts. After having met with the chief once,
  # scouts can continue to meet with the chief, but they won't
  # receive any gifts, even if the first encounter resulted in
  # nothing. But note that a scout is always "eligible" for being
  # used for "target practice" and eliminated, even if the chief
  # has already been spoken with. So in other words, this flag
  # only prevents the player from receiving multiple gifts from
  # the same chief.
  has_spoken_with_chief 'bool',

  # When there is a mission in a dwelling then that dwelling may
  # send native converts to the player. There are a couple of
  # ways that native converts can be produced (over time as the
  # missionary works, or when attacking a dwelling with a mis-
  # sion). Either way, when a convert gets "produced," it doesn't
  # actually create the unit immediately; instead it just sets
  # this value. Then, once each turn, this number will be checked
  # and, if the brave from this dwelling is adjacent to a play-
  # er's colony then a convert will be produced. The OG does not
  # seem to accumulate these, hence it is a bool instead of an
  # int. This also automatically enforces the OG's rule that only
  # one convert per turn is produced per dwelling (we can have
  # multiple per turn from different dwellings).
  #
  # We need to store this at the dwelling level (as opposed to
  # the tribe level) for two reasons. First, we need to know
  # which dwelling the convert is coming from so that it can be
  # delivered to a nearby colony. And second, if the dwelling
  # gets burned in a series of attacks that e.g. happen all in
  # one turn, then the ready convert inside should disappear (un-
  # less they emerge as a result of the attack, which can some-
  # times happen).
  convert_ready 'bool',

  _features { equality, validation }
}

struct.FrozenMission {
  nation 'e_nation',
  level 'e_missionary_type',
}

struct.FrozenDwelling {
  tribe 'e_tribe',
  location 'Coord',
  mission 'base::maybe<FrozenMission>',
  # TODO: not sure yet if we're going to put alarm info in here.
}

# The fields in the dwelling object are those that aren't involve
# in any form of ownership over the dwelling (e.g., no map loca-
# tion and no tribe ownership). With the exception of `id`, they
# are the quantities that can be safely changed after the
# dwelling has been created (though not all of them will be in
# practice due to game rules).
struct.Dwelling {
  # This will be zero (invalid) for dwelling objects that don't
  # necessarily represent real dwellings.
  id 'DwellingId',

  is_capital 'bool',

  # The number of times the dwelling needs to be attacked (suc-
  # cessfully) for it to be burned. It is lowered on each suc-
  # cessful attack, and the village is "burned" when it hits
  # zero. This number will recover over time if it is partially
  # lowered (see the growth_counter field). Note that when dis-
  # banding a free brave, it does not affect the population of
  # the dwelling, and neither does killing one via combat.
  population 'int',

  # This is a counter that increases by the current population
  # amount each turn. This way, the population increases more
  # slowly the lower the population. When it hits a critical
  # value (20 in the OG) then a new brave is created on the map.
  # If a brave already exists on the map then the population is
  # increased by one. If the population is already at the max,
  # then the counter does not increase. As in the OG, if the
  # counter is incremented and it goes above 20, it is still
  # reset to 0.
  growth_counter 'int',

  trading 'DwellingTradingState',

  # These are only relevant once the tribe encounters the nation.
  relationship 'refl::enum_map<e_nation, DwellingRelationship>',

  teaches 'e_native_skill',
  # For non-capital dwellings this is relevant since they can
  # only teach once (for all nations, as in OG).
  has_taught 'bool',

  # This goes last. It is only populated on player squares to
  # record the visual state of the dwelling when its tile was
  # last visited. I.e., it contains a "frozen" representation of
  # those aspects of a dwelling that cannot be derived only from
  # the other values in this struct.
  frozen 'base::maybe<FrozenDwelling>',

  _features { equality, validation },
}
