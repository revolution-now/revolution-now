# ===============================================================
# natives.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-10-30.
#
# Description: Rds definitions for the natives module.
#
# ===============================================================
# ss
include "ss/dwelling-id.hpp"
include "ss/dwelling.rds.hpp"
include "ss/native-enums.rds.hpp"
include "ss/tribe.rds.hpp"

# gfx
include "gfx/coord.hpp"

# refl
include "refl/enum-map.hpp"

# base
include "base/maybe.hpp"

# C++ standard library
include "<unordered_map>"

namespace "rn"

# These are aspects of a dwelling that "own it" in a sense. The
# reverse of these owning relationships will be represented by
# transient caches in the NativesState object and so they cannot
# be safely represented as fields in the Dwelling object since we
# 1) need them to be specified when the dwelling is created, and
# 2) can't allow them to be changed thereafter, at least not di-
# rectly without carefully updating caches.
struct.DwellingOwnership {
  location 'Coord',
  tribe 'e_tribe',
}

struct.DwellingState {
  dwelling 'Dwelling',
  ownership 'DwellingOwnership',
}

namespace "rn.wrapped"

struct.NativesState {
  next_dwelling_id 'DwellingId',

  tribes 'refl::enum_map<e_tribe, base::maybe<Tribe>>',

  dwellings 'std::unordered_map<DwellingId, DwellingState>',

  # All players see the same native land ownership in the sense
  # that if one player takes a square from the natives it will
  # appear unowned from then on to all nations. The exception to
  # this is the acquisition of Peter Minuit; he will cause all
  # land to appear non-owned but only from the perspective of
  # that player. Therefore, acquiring Peter Minuit will not actu-
  # ally change this owned-land field. Therefore, this field
  # should not be read directly by normal code; instead one
  # should use the API functions in the native-owned module.
  owned_land_without_minuit 'std::unordered_map<Coord, DwellingId>',

  _features { equality, validation }
}
