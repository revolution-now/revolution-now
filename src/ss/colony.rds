# ===============================================================
# colony.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2020-11-13.
#
# Description: RDS definitions for the colony module.
#
# ===============================================================
# gs
include "ss/colony-enums.rds.hpp"
include "ss/colony-id.hpp"
include "ss/colony-job.rds.hpp"
include "ss/commodity.rds.hpp"
include "ss/nation.rds.hpp"
include "ss/sons-of-liberty.rds.hpp"
include "ss/unit-id.hpp"
include "ss/unit-type.rds.hpp"

# gfx
include "gfx/coord.hpp"

# refl
include "refl/enum-map.hpp"

# base
include "base/maybe.hpp"

# C++ standard library
include "<string>"
include "<unordered_map>"

namespace "rn"

struct.OutdoorUnit {
  unit_id 'UnitId',
  job     'e_outdoor_job',
}

sumtype.Construction {
  building {
    what 'e_colony_building',
  },
  unit {
    type 'e_unit_type',
  }
}

struct.FrozenColony {
  # This is here because it requires knowing whether the player
  # has a particular founding father which affects the Sons of
  # Liberty percent.
  sons_of_liberty_integral_percent 'int',
}

struct.Colony {
  # This will be zero (invalid) for colony objects that don't
  # necessarily represent real colonies.
  # TODO: get rid of this from here.
  id 'ColonyId',

  player 'e_player',

  name 'std::string',

  location 'Coord',

  # Commodities.
  commodities 'refl::enum_map<e_commodity, int>',

  # This is a vector and not a set because it is desirable to
  # preserve the order in which units are added for UI purposes.
  indoor_jobs 'refl::enum_map<e_indoor_job, std::vector<UnitId>>',

  outdoor_jobs 'refl::enum_map<e_direction, base::maybe<OutdoorUnit>>',

  # For each unit that is teaching, we record the number of turns
  # they've been teaching.
  teachers 'std::unordered_map<UnitId, int>',

  buildings 'refl::enum_map<e_colony_building, bool>',

  # What building is the colony currently constructing.
  construction 'base::maybe<Construction>',

  hammers 'int',

  # State required for computing and notifying on Sons of Liberty
  # (SoL) membership for this colony.
  sons_of_liberty 'SonsOfLiberty',

  # Which goods are being sold by the custom house. Only relevant
  # if there is a custom house.
  custom_house 'refl::enum_map<e_commodity, bool>',

  # This goes last. It is only populated on player squares to
  # record the visual state of the colony when its tile was last
  # visited. I.e., it contains a "frozen" representation of those
  # aspects of a colony that cannot be derived only from the
  # other values in this struct.
  frozen 'base::maybe<FrozenColony>',

  _features { equality, validation },
}
