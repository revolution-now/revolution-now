# ===============================================================
# old-world-state.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-05-27.
#
# Description: Per-player old world state.
#
# ===============================================================
# gs
include "ss/market.rds.hpp"
include "ss/unit-id.hpp"
include "ss/unit-type.rds.hpp"

# base
include "base/maybe.hpp"

# C++ standard library
include "<array>"

namespace "rn"

# The state of the harbor view UI.
struct.HarborState {
  # TODO: should add validation that this unit exists.
  selected_unit 'base::maybe<UnitId>',
}

# The state of things related to immigration on the europe side.
struct.ImmigrationState {
  # At any given time there are three immigrants in the pool who
  # are considering to come. Note that one or more of these three
  # unit types can be the same type. The unit types must be human
  # types (no ships, no artillery, no wagon trains, etc.) and
  # must be non-revolutionary types.
  immigrants_pool 'std::array<e_unit_type, 3>',

  # In the OG you can rush the recruitment of an immigrant in the
  # immigrant pool by clicking on the Recruit button in the
  # harbor view. When this happens, the game computes a price
  # that depends on a baseline price along with an additional
  # term that depends on how many recruits have been rushed to
  # date in the game (each subsequent one increases that term).
  # The result of this is that the zero-crossess price of a rush
  # recruitment increases on each rush recruitment, and never
  # again decreases. That said, the actual price of a rushed re-
  # cruitment can be (almost) arbitrarily low by just accumu-
  # lating the necessary amount of crosses. But once a recruit-
  # ment happens via cross accumulation, the price resets again
  # to the higher value determined by the number of total rushed
  # recruits.
  num_recruits_rushed 'int',

  _features { equality, validation }
}

# State of the current tax rate and movement thereof.
struct.TaxationState {
  # Tax rate (%) imposed by the king: [0, 100].
  tax_rate 'int',

  # The future turn number on which the next tax event (increase
  # or decrease, but usually always an increase) will happen.
  # Each time a tax event happens this number is recomputed. When
  # the turn it refers to comes, the game will check some other
  # conditions (such as the year, and number of colonies) to see
  # if it is greenlighted to trigger a tax event. If so it will
  # trigger one. But either way it will recompute this number and
  # set it to something in the future.
  next_tax_event_turn 'int',

  # This is not required for tax state, but it is required for
  # the messages that the king is raising taxes in honor of his
  # marriage to his Nth wife. Each time such a message appears,
  # we want the wife number to be larger than it was before, so
  # we have to track it. This tracks the number of times he has
  # been remarried since the start of the game.
  king_remarriage_count 'int',

  _features { equality, validation }
}

# This holds the state of old-world related things. That
# includes:
#
#   * The harbor UI state.
#   * The state of the king and parent country.
#   * The prices of commodities in the old world.
#   * The size of the expeditionary force.
#
# It is not a
# top-level state because there is one for each player, so it is
# more natural to just embed it in the Player object. That said,
# it is also nice to have it in its own struct grouping.
struct.OldWorldState {
  harbor_state 'HarborState',

  # At any given time there are three immigrants in the pool who
  # are considering to come.
  immigration 'ImmigrationState',

  # All things taxes.
  taxes 'TaxationState',

  # Player-specific market state.
  market 'PlayerMarketState',
}
