# ===============================================================
# sg-turn.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-02-12.
#
# Description: Turn-related save-game state.
#
# ===============================================================
# Revolution Now
include "unit-id.hpp"

# Rds
include "nation.rds.hpp"

# base
include "base/maybe.hpp"

# C++ standard library
include "<deque>"

namespace "rn"

enum.e_season {
  winter,
  spring,
  summer,
  autumn,
}

struct.TurnTimePoint {
  year 'int',
  season 'e_season',

  # Total number of turns since the start of the game.
  turns 'int',

  _features { validation, equality }
}

struct.Autosave {
  # This is the last turn that was autosaved. This is to prevent
  # auto-saving multiple times per turn, which can happen because
  # there are a couple of checkpoints where we try to autosave in
  # a turn if an autosave has not yet been done in that turn.
  last_save 'base::maybe<int>',
}

sumtype.PlayerTurnState {
  not_started {},
  colonies {},
  units {
    q 'std::deque<UnitId>',
    skip_eot 'bool',
    view_mode 'bool',
  },
  eot {},
  post {},
  finished {},
}

sumtype.TurnCycle {
  not_started {}, # should be first.
  natives {},
  player {
    type 'e_player',
    st 'PlayerTurnState',
  },
  intervention {},
  end_cycle {},
  finished {},
}

struct.TurnState {
  time_point 'TurnTimePoint',
  autosave 'Autosave',
  cycle 'TurnCycle',
}
