# ===============================================================
# sg-units.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-02-12.
#
# Description: RDS definitions for the units save game state.
#
# ===============================================================
# gs
include "ss/colony-id.hpp"
include "ss/dwelling-id.hpp"
include "ss/unit-id.hpp"
include "ss/unit.hpp"
include "ss/native-unit.rds.hpp"

# gfx
include "gfx/coord.hpp"

# base
include "base/maybe.hpp"

# C++ standard library
include "<unordered_map>"

namespace "rn"

enum.e_unit_kind {
  euro,
  native,
}

sumtype.PortStatus {
  # For ships that are venturing to europe. ``turns` gives the
  # number of turns that elapsed since starting the journey. The
  # initial value of it is 0.
  outbound {
    turns 'int',
  },

  # For ships that are venturing to europe. ``turns` gives the
  # number of turns that elapsed since starting the journey. The
  # initial value of it is 0.
  inbound {
    turns 'int',
  },

  # If a ship is in this state then it is in port (shown in the
  # "in port" box) whereas for land units this means that they
  # are on the dock.
  in_port {},

  _features { equality, validation }
}

sumtype.UnitOwnership {
  free {},
  world {
    coord 'Coord',
  },
  cargo {
    holder 'UnitId',
  },
  harbor {
    port_status 'PortStatus',

    # This field only has a value if the unit is a ship and the
    # ship arrived in europe by sailing the high seas in the new
    # world. In that case it specifies the square from which the
    # unit sailed the high seas. This is so that, when the ship
    # eventually returns to the new world, it can be placed where
    # it left. Note that this square is not the destination
    # square of the last move order but the source square, since
    # the destination square might not exist if the unit moved
    # off the edge of the map.
    #
    # On the other hand if the ship ended up in europe without
    # having sailed there (possibly because it was purchased
    # there or it was damaged and was transported there) then
    # this will not have a value. In those cases, the game will
    # place the ship on the last sea lane square sailed by the
    # player, regardless of which side of the map it is on. If,
    # in turn, that value is not present (i.e. at the very start
    # of the game) then it will use the player's starting posi-
    # tion as a final fallback.
    sailed_from 'base::maybe<Coord>',
  },
  colony {
    id 'ColonyId',
  },
  dwelling { # For missionaries.
    id 'DwellingId',
  },
}

struct.NativeUnitOwnership {
  coord 'Coord',
  # As in the OG, all braves are owned by a dwelling.
  dwelling_id 'DwellingId',
}

sumtype.UnitState {
  euro {
    unit 'Unit',
    ownership 'UnitOwnership',
  },
  native {
    unit 'NativeUnit',
    ownership 'NativeUnitOwnership',
  },
}

namespace "rn.wrapped"

struct.UnitsState {
  next_unit_id 'GenericUnitId',
  units 'std::unordered_map<GenericUnitId, UnitState>',

  # In some cases units need to have an ordering that is
  # well-defined and deterministic (and persistent) but that is
  # different from their creation order and/or which can change
  # dynamically. Such cases are units at the gate of a colony,
  # units on the harbor dock, ships in the harbor port, etc. Even
  # though each of these has its own set of ordered units, any
  # given unit can only be in one place at one time. Therefore we
  # can simplify the representation of this by just using a
  # single ordering list for all units. Then the ordering of a
  # specific subset of units is just determined by the relative
  # values of the indices in this map, and other units are ig-
  # nored. Any unit that is in a state that requires ordering
  # must have an entry in this map.
  #
  # What also allows us to simplify this representation is that,
  # when the ordering of a unit is changed with respect to other
  # units, said change is always done by moving the unit to the
  # "front". Therefore, we never need to insert a unit in the
  # middle of an ordering, which would be tricky with this repre-
  # sentation. Instead, we just bump the unit's index to a new
  # value that is larger than any ever used. That is guaranteed
  # to put it at the front of whatever grouping it is a part of.
  unit_ordering 'std::map<UnitId, int64_t>',
  # Holds the last value used; only ever increases.
  curr_unit_ordering_index 'int64_t',

  _features { equality, validation }
}
