# ===============================================================
# player.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-02-11.
#
# Description: RDS definitions for the player module.
#
# ===============================================================
# Revolution Now
include "maybe.hpp"

# gs
include "ss/fathers.rds.hpp"
include "ss/nation.rds.hpp"
include "ss/old-world-state.rds.hpp"

# gfx
include "gfx/coord.hpp"

namespace "rn"

# Stats collected for the purpose of calculating a final score.
struct.PlayerScoreStats {
  dwellings_burned 'int',
}

# Note: it is important that these go in chronological order so
# that we can use inequality operators on them, which we do in
# some places. E.g. if status <= declared then...
enum.e_revolution_status {
  not_declared,
  declared,
  won,
}

struct.Player {
  # Somewhat just for convenience.
  nation 'e_nation',

  human 'bool',

  money 'int',

  # How many crosses has this player accumulated. Note that this
  # gets subtracted from each time a new immigrant arrives on the
  # docks, so it is not cumulative beyond that. The number of
  # crosses needed to produce an immigrant depends on a number of
  # factors, plus some randomness.
  crosses 'int',

  # The state of all things related to the old world, king, euro-
  # pean market prices, etc.
  old_world 'OldWorldState',

  # When the new world is first discovered this will have a value
  # and will be the name given to the new world by the player.
  discovered_new_world 'maybe<std::string>',

  revolution_status 'e_revolution_status',

  # Anything related to founding fathers is in here.
  fathers 'FoundingFathersState',

  # The original game, which has a (visible) map size of 56x70,
  # starts the four players out at equally spaced locations along
  # the vertical (14 rows apart):
  #
  #   y=14: AI
  #   y=28: AI or human
  #   y=42: AI or human
  #   y=56: AI
  #
  # This is chosen at the start of the game and then does not
  # change thereafter. The original appears to randomly select
  # one of the two middle slots for the player. In general, it
  # chooses the x values such as to place the players at the
  # left-most edge of the seal land in their row. Then, by virtue
  # of how the sea lane is generated, that will always place them
  # about 3-4 tiles away from land with high probability.
  starting_position 'Coord',

  # This holds the source square of the most recent ship that
  # sailed the high seas. This is needed so that if a ship is in
  # europe and it got there without sailing from the new world,
  # then this square will be used to place it when it arrives in
  # the new world for the first time. If the unit sails to europe
  # from the new world then this coordinate will not be used; in
  # that case, the unit will return to the square from which it
  # sailed. At the start of the game this will not have a value
  # because now ships have sailed to europe, and so in that case
  # the game will use the starting_position.
  last_high_seas 'maybe<Coord>',

  # How many artillery units has the player purchased from europe
  # to date. We need to know this because the price goes up by
  # 100 after each purcahse.
  artillery_purchases 'int',

  # Stats collected for the purpose of calculating a final score.
  score_stats 'PlayerScoreStats',
}
