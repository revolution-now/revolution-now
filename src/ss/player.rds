# ===============================================================
# player.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-02-11.
#
# Description: RDS definitions for the player module.
#
# ===============================================================
# Revolution Now
include "maybe.hpp"

# ss
include "ss/fathers.rds.hpp"
include "ss/nation.rds.hpp"
include "ss/old-world-state.rds.hpp"
include "ss/revolution.rds.hpp"
include "ss/woodcut.rds.hpp"

# gfx
include "gfx/coord.hpp"

# refl
include "refl/enum-map.hpp"

namespace "rn"

# Stats collected for the purpose of calculating a final score.
struct.PlayerScoreStats {
  dwellings_burned 'int',
}

# TODO: placeholder.
enum.e_euro_relationship {
  none,
  peace,
  war,
}

enum.e_player_control {
  # We need the "withdrawn" value for dealing with foreign euro-
  # pean powers after declaration: they completely stop evolving,
  # but their colonies are still present on the map.
  withdrawn,
  human,
  ai,
}

struct.Player {
  # Somewhat just for convenience.
  type 'e_player',
  nation 'e_nation',

  control 'e_player_control',

  money 'int',

  # Used for build-up of REF. This gets incremented by any tax
  # revenue received by the crown. In addition, it also gets in-
  # cremented by a fixed amount per turn, by an amount determined
  # by difficulty level. When it is larger than a threshold T
  # then a new unit will be added to the expeditionary force and
  # T will be subtracted from this value (at most once per turn).
  #
  # Note that although this value increases when selling a good
  # in the harbor at a non-zero tax rate, it does not then de-
  # crease when purchasing a good. So one can make this number
  # ratchet up by buying and then selling the same good repeat-
  # edly.
  royal_money 'int',

  # Accumulated post-tax revenue from sales, including:
  #
  #   * Harbor sales.
  #   * Treasure reimbursement (either manually transported or
  #     with the King transporting it).
  #   * Custom house sales.
  #   * Un-equipping units on the dock.
  #   * Not affected by trade with natives.
  #
  # Never decreases.
  #
  # This is maintained because the OG keeps track of it in its
  # sav files, but not sure if it is used.
  total_after_tax_revenue 'int',

  # How many crosses has this player accumulated. Note that this
  # gets subtracted from each time a new immigrant arrives on the
  # docks, so it is not cumulative beyond that. The number of
  # crosses needed to produce an immigrant depends on a number of
  # factors, plus some randomness.
  crosses 'int',

  # The state of all things related to the old world, king, euro-
  # pean market prices, etc.
  old_world 'OldWorldState',

  # When the new world is first discovered this will have a value
  # and will be the name given to the new world by the player.
  new_world_name 'maybe<std::string>',

  # Records when a one-time event happens, so that it does not
  # get triggered again.
  woodcuts 'refl::enum_map<e_woodcut, bool>',

  # This is the total number of bells thus accumulated toward the
  # next founding father. This will be reset to zero when a new
  # father joins the congress. This stops accumulating after in-
  # dependence is declare; from then on, bells are accumulated in
  # the revolution state toward the intervention force.
  bells 'int',

  # This is held per player because it is possible for multiple
  # players to have independence, i.e. even after an AI player is
  # granted independence, the human player can still declare and
  # fight the war of independence, though their score will be a
  # bit lower for not being the first to declare.
  revolution 'RevolutionState',

  # Anything related to founding fathers is in here.
  fathers 'FoundingFathersState',

  # The original game, which has a (visible) map size of 56x70,
  # starts the four players out at equally spaced locations along
  # the vertical (14 rows apart):
  #
  #   y=14: AI
  #   y=28: AI or human
  #   y=42: AI or human
  #   y=56: AI
  #
  # This is chosen at the start of the game and then does not
  # change thereafter. The original appears to randomly select
  # one of the two middle slots for the player. In general, it
  # chooses the x values such as to place the players at the
  # left-most edge of the seal land in their row. Then, by virtue
  # of how the sea lane is generated, that will always place them
  # about 3-4 tiles away from land with high probability.
  starting_position 'Coord',

  # This holds the source square of the most recent ship that
  # sailed the high seas. This is needed so that if a ship is in
  # europe and it got there without sailing from the new world,
  # then this square will be used to place it when it arrives in
  # the new world for the first time. If the unit sails to europe
  # from the new world then this coordinate will not be used; in
  # that case, the unit will return to the square from which it
  # sailed. At the start of the game this will not have a value
  # because now ships have sailed to europe, and so in that case
  # the game will use the starting_position.
  last_high_seas 'maybe<Coord>',

  # How many artillery units has the player purchased from europe
  # to date. We need to know this because the price goes up by
  # 100 after each purcahse.
  artillery_purchases 'int',

  # Stats collected for the purpose of calculating a final score.
  score_stats 'PlayerScoreStats',

  # NOTE: this map must be kept symmetric with the counterparty's
  # map. Thus it should only be updated via the designated API
  # methods.
  relationship_with 'refl::enum_map<e_player, e_euro_relationship>',

  _features { equality, validation }
}
