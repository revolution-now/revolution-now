# ===============================================================
# enter-dwelling.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-11-06.
#
# Description: Rds definitions for the enter-dwelling module.
#
# ===============================================================
# Revolution Now
include "alarm.rds.hpp"
include "combat.rds.hpp"
include "maybe.hpp"

# ss
include "ss/dwelling-id.hpp"
include "ss/native-enums.rds.hpp"
include "ss/unit-composer.hpp"
include "ss/unit-id.hpp"
include "ss/unit-type.rds.hpp"

# gfx
include "gfx/coord.hpp"

# C++ standard library
include "<vector>"

namespace "rn"

# ===============================================================
# General.
# ===============================================================
enum.e_enter_dwelling_option {
  live_among_the_natives,
  speak_with_chief,
  # This will be used when attacking a dwelling that does not
  # have a free brave sitting on top of it (most common).
  attack_village,
  # This will be used when attacking a dwelling that happens to
  # have its free brave sitting on top of it.
  attack_brave_on_dwelling,
  # demand_tribute,
  # establish_mission,
  # incite_indians,
  # denounce_foreign_mission,
  # trade,
  cancel,

  _features { nodiscard }
}

enum.e_dwelling_interaction_category {
  scout,
  military,
  colonist,
  missionary,
  trade,
  none,
}

struct.EnterNativeDwellingOptions {
  dwelling_id 'DwellingId',
  reaction 'e_enter_dwelling_reaction',
  # These will be in the order that they should be presented to
  # the player.
  options 'std::vector<e_enter_dwelling_option>',
}

# ===============================================================
# Live among the natives.
# ===============================================================
sumtype.LiveAmongTheNatives {
  # Cannot train wagon trains, military units, etc. These units
  # will be prevented from even attempting, but just in case.
  generally_ineligible {},

  # These are two ineligible units that are special in that they
  # present the player with a unique message.
  petty_criminal {},
  native_convert {},

  # The natives will not teach when their unhappiness level is
  # high enough.
  unhappy {},

  # The dwelling (if it is a non-capital) will not teach a
  # colonist twice, even if they are of a different nation.
  already_taught {},

  # The unit cannot be taught if it already has some expertise.
  has_expertise {
    in_what 'e_unit_activity',
  },

  # Success.
  promoted {
    # By specifying the composition here it allows us (as in the
    # OG) to have the natives teach a pioneer but have the pio-
    # neer still retain its tools.
    to 'UnitComposition',
  },
}

# ===============================================================
# Speak with Chief
# ===============================================================
sumtype.ChiefAction {
  # For this one, the player just receives a message saying "The
  # {} are always pleased to welcome Dutch travelers."
  none {},

  # Gift from chief.
  gift_money {
    quantity 'int',
  },

  # Surrounding land tiles are revealed.
  tales_of_nearby_lands {
    tiles 'std::vector<Coord>',
  },

  # Non-expert non-seasoned scout is promoted to seasoned scout.
  promotion {},

  # The scout is eliminated ("used as target practice"). This is
  # the only negative outcome.
  target_practice {},
}

struct.SpeakWithChiefResult {
  expertise 'e_native_skill',

  # What this dwelling is most looking for trade-wise.
  primary_trade 'e_commodity',

  # The dwelling states that it will also accept the following
  # two alternate goods.
  secondary_trade_1 'e_commodity',
  secondary_trade_2 'e_commodity',

  # Finally, this is what the chief does to the scout. Can be a
  # gift (positive), nothing (neutral) or eliminating the scout
  # (negative).
  action 'ChiefAction_t',
}

# ===============================================================
# Attack Village
# ===============================================================
struct.VillageDestruction {
  # When a dwelling gets destroyed any braves that it owns that
  # are on the map will be destroyed. In the OG this is either
  # zero or one, but here we support multiple for future flexi-
  # bility.
  braves_to_kill 'std::vector<NativeUnitId>',

  # If there is a missionary in this dwelling then he will be re-
  # leased upon the destruction.
  missionary_to_release 'maybe<UnitId>',

  # The destruction of a dwelling may or may not result in a
  # treasure (depends on Cortes).
  treasure_amount 'maybe<int>',

  # If this was the last dwelling of a tribe.
  tribe_destroyed 'maybe<e_tribe>',
}

# Describes the possible outcomes that can happen regarding mis-
# sionaries and converts when a dwelling is attacked containing a
# friendly mission.
enum.e_attack_effect_with_missionary {
  # In the OG, if the dwelling has a mission and you attack it
  # then you can increase the chances that a new convert will
  # join your colonies (strange, but that's how it works). The
  # convert will be produced immediately on the same square as
  # the attacker.
  convert_produced,

  # If this happens then the tribe has decided to burn all of the
  # player's missions. This typically happens while attacking a
  # tribe and having their tribal anger increase. Note that this
  # can happen within the player's turn, potentially after each
  # attack, at which point the missions should all be immediately
  # removed even if we are still in the middle of the player's
  # turn. This is so that we can't stack up a lot of armies out-
  # side all of a tribe's dwellings (all with missions) and then
  # repeatedly attack them within one turn to extract many con-
  # verts; the missions will be burned part of the way through,
  # thwarting this.
  missions_burned,
}

struct.AttackVillageResult {
  combat 'CombatEuroAttackDwelling',

  new_tribal_alarm 'int',

  missionary_effect 'maybe<e_attack_effect_with_missionary>',

  # If the village is to be destroyed as a result of this attack
  # then this will contain info about what should result.
  village_destruction 'maybe<VillageDestruction>',
}

# ===============================================================
# EnterDwellingComputeResult
# ===============================================================
# There will be one of these for each option.
sumtype.EnterDwellingOutcome {
  cancel {}, # should be first.
  live_among_the_natives {
    outcome 'LiveAmongTheNatives_t',
  },
  speak_with_chief {
    outcome 'SpeakWithChiefResult',
  },
  attack_village {
    outcome 'AttackVillageResult',
  },
  attack_brave_on_dwelling {},
  # demand_tribute,
  # establish_mission,
  # incite_indians,
  # denounce_foreign_mission,
  # trade,
}
