# ===============================================================
# icombat.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2023-02-04.
#
# Description: Rds definitions for the icombat module.
#
# ===============================================================
# Revolution Now
include "combat-modifiers.rds.hpp"
include "damaged.rds.hpp"
include "maybe.hpp"

# ss
include "ss/colony-id.hpp"
include "ss/dwelling-id.hpp"
include "ss/nation.rds.hpp"
include "ss/native-enums.rds.hpp"
include "ss/unit-id.hpp"
include "ss/unit-type.hpp"

# gfx
include "gfx/coord.hpp"

# refl
include "refl/enum-map.hpp"

# base
include "base/maybe.hpp"

# C++ standard library
include "<vector>"

namespace "rn"

enum.e_combat_winner {
  defender,
  attacker,
}

enum.e_naval_combat_outcome {
  evade,
  damaged,
  sunk,
}

# ===============================================================
# Combat Outcomes.
# ===============================================================
sumtype.EuroUnitCombatOutcome {
  # This could happen if a ship evades an attack.
  no_change {},
  # This could happen to a ship, a scout, or a non-military unit
  # attacked by natives.
  destroyed {},
  # This will happen to a non-military unit (excluding ships)
  # that are attacked by other europeans.
  captured {
    new_nation 'e_nation',
    new_coord 'Coord',
  },
  # This is for veteran colonists that lose their veteran status
  # upon capture.
  captured_and_demoted {
    to 'e_unit_type',
    new_nation 'e_nation',
    new_coord 'Coord',
  },
  # Promotion/demotion.
  promoted {
    to 'UnitType',
  },
  demoted {
    to 'UnitType',
  },
}

sumtype.EuroNavalUnitCombatOutcome {
  # This could happen if a ship evades an attack.
  no_change {},

  # This could happen if the attacking ship wins (and so the de-
  # fending ship is sunk or damaged) in which case the attacking
  # ship moves onto the square that was occupied by the defender.
  moved {
    to 'Coord',
  },

  sunk {},

  damaged {
    port 'ShipRepairPort',
  },
}

# This is for a unit working in a colony that defends the colony
# when it is attacked in an undefended state.
sumtype.EuroColonyWorkerCombatOutcome {
  no_change {},
  defeated {}, # colony is captured.
}

# This is for when a colony that contains a fort/fortress fires
# on an adjacent ship.
sumtype.ColonyArtilleryCombatOutcome {
  lose {},
  win {},
}

sumtype.NativeUnitCombatOutcome {
  no_change {},
  destroyed {
    # According to the strategy guide, there is a chance that a
    # tribe will retain the horses/muskets of a brave even when
    # it is eliminated.
    tribe_retains_horses 'bool',
    tribe_retains_muskets 'bool',
  },
  promoted {
    # Note that in the OG, this only seems to happen when the
    # brave is the attacker (and wins); moreover, in that case,
    # it happens 100% of the time (assuming that any horses/mus-
    # kets lost by the european unit can be taken by the brave).
    to 'e_native_unit_type',
  },
}

sumtype.DwellingCombatOutcome {
  no_change {},

  population_decrease {
    # In the OG, if the dwelling has a mission and you attack it
    # then you can increase the chances that a new convert will
    # join your colonies (strange, but that's how it works). The
    # convert will be produced immediately on the same square as
    # the attacker.
    convert_produced 'bool',
  },

  destruction {
    # When a dwelling gets destroyed any braves that it owns that
    # are on the map will be destroyed. In the OG this is either
    # zero or one, but here we support multiple for future flexi-
    # bility.
    braves_to_kill 'std::vector<NativeUnitId>',

    # If there is a missionary in this dwelling then he will be
    # released upon the destruction.
    missionary_to_release 'maybe<UnitId>',

    # The destruction of a dwelling may or may not result in a
    # treasure (depends on Cortes).
    treasure_amount 'maybe<int>',

    # If this was the last dwelling of a tribe.
    tribe_destroyed 'maybe<e_tribe>',

    # See corresponding comment above.
    convert_produced 'bool',
  },
}

# ===============================================================
# Combat Stats.
# ===============================================================
sumtype.CombatModifierEffect {
  add_absolute {
    what 'double',
  },
  add_percent {
    what 'double',
  },
  mul {
    what 'double',
  }
}

struct.CombatStats {
  _template { IdT, ModifiersT, OutcomeT },

  id 'IdT',
  modifiers 'refl::enum_map<ModifiersT, base::maybe<CombatModifierEffect>>',
  base_weight 'double', # without modifiers.
  modified_weight 'double', # with modifiers.
  outcome 'OutcomeT',
}

struct.Sinking {
  guns 'int', # from the winner.
  hull 'int', # from the loser.
}

struct.NavalCombatStats {
  id 'UnitId',
  modifiers 'refl::enum_map<e_euro_unit_combat_modifiers, base::maybe<CombatModifierEffect>>',
  evade_weight 'int',
  # The combat weights can always be populated, even if they are
  # not used (which they won't be in the case of an evade).
  base_combat_weight 'double',     # without modifiers.
  modified_combat_weight 'double', # with modifiers.
  outcome 'EuroNavalUnitCombatOutcome',
}

struct.CombatEuroAttackEuro {
  winner 'e_combat_winner',

  attacker 'CombatStats<UnitId, e_euro_unit_combat_modifiers, EuroUnitCombatOutcome>',
  defender 'CombatStats<UnitId, e_euro_unit_combat_modifiers, EuroUnitCombatOutcome>',
}

struct.CombatShipAttackShip {
  outcome 'e_naval_combat_outcome',
  winner 'base::maybe<e_combat_winner>',
  # The sink vs. damaged weights can't be computed in all cases
  # because they require knowing which unit one the battle; but
  # there won't always be a winner, i.e. if the defender evades.
  sink_weights 'maybe<Sinking>',

  attacker 'NavalCombatStats',
  defender 'NavalCombatStats',
}

struct.CombatEuroAttackUndefendedColony {
  winner 'e_combat_winner',

  colony_id 'ColonyId',

  attacker 'CombatStats<UnitId, e_euro_unit_combat_modifiers, EuroUnitCombatOutcome>',
  defender 'CombatStats<UnitId, e_euro_unit_combat_modifiers, EuroColonyWorkerCombatOutcome>',
}

struct.CombatColonyArtilleryAttackShip {
  winner 'e_combat_winner',

  attacker 'CombatStats<ColonyId, e_colony_artillery_combat_modifiers, ColonyArtilleryCombatOutcome>',
  defender 'NavalCombatStats',
}

struct.CombatEuroAttackBrave {
  winner 'e_combat_winner',

  attacker 'CombatStats<UnitId, e_euro_unit_combat_modifiers, EuroUnitCombatOutcome>',
  defender 'CombatStats<NativeUnitId, e_brave_combat_modifiers, NativeUnitCombatOutcome>',
}

struct.CombatBraveAttackEuro {
  winner 'e_combat_winner',

  # According to the SG, when a brave attacks a square containing
  # multiple (non-military) colonists, and it wins, then all
  # colonists on the square are destroyed. But this doesn't apply
  # if the square contains a colony. TODO: Should verify this.
  all_colonists_destroyed 'bool',

  attacker 'CombatStats<NativeUnitId, e_brave_combat_modifiers, NativeUnitCombatOutcome>',
  defender 'CombatStats<UnitId, e_euro_unit_combat_modifiers, EuroUnitCombatOutcome>',
}

struct.CombatEuroAttackDwelling {
  winner 'e_combat_winner',

  new_tribal_alarm 'int',

  # If this happens then the tribe has decided to burn all of the
  # player's missions. This typically happens while attacking a
  # tribe and having their tribal anger increase. Note that this
  # can happen within the player's turn, potentially in response
  # to any attack (win or lose), at which point the missions
  # should all be immediately removed even if we are still in the
  # middle of the player's turn. This is so that we can't stack
  # up a lot of armies outside all of a tribe's dwellings (all
  # with missions) and then repeatedly attack them within one
  # turn to extract many converts; the missions will be burned
  # part of the way through, thwarting this.
  missions_burned 'bool',

  attacker 'CombatStats<UnitId, e_euro_unit_combat_modifiers, EuroUnitCombatOutcome>',
  defender 'CombatStats<DwellingId, e_dwelling_combat_modifiers, DwellingCombatOutcome>',
}
