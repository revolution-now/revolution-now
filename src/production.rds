# ===============================================================
# production.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2022-05-31.
#
# Description: Rds definitions for the production module.
#
# ===============================================================
# gs
include "ss/colony.rds.hpp"
include "ss/commodity.rds.hpp"

# gfx
include "gfx/cartesian.rds.hpp"

# refl
include "refl/enum-map.hpp"

namespace "rn"

# This is for pairs of commodities where one is "mined" (raw) and
# the other is produced (product) from the mined material.
struct.RawMaterialAndProduct {
  raw_produced 'int',

  # The amount of the raw material that would be consumed by the
  # full production of the product.
  raw_consumed_theoretical 'int',

  # This could be less than raw_produced because some is being
  # consumed to make the product.
  raw_delta_theoretical 'int',

  # The amount of the raw material that is actually consumed.
  # This can include both incrementally produced raw materials as
  # well as stored ones.
  raw_consumed_actual 'int',

  # This is the actual amount that will be added to the commodity
  # store, and takes into account warehouse capacity. Can be pos-
  # itive or negative, but will never make the commodity quantity
  # in the warehouse negative, and also does not take into ac-
  # count spoilage.
  raw_delta_final 'int',

  # This gives the maximum amount of product that theoretically
  # could be produced in this colony at this time given the
  # buildings, colonists working in those buildings.
  product_produced_theoretical 'int',

  # This is the actual amount that can be produced based on the
  # limitations on supply (produced incremental and stored) of
  # the raw material.
  product_produced_actual 'int',

  # This is the actual amount that will be added to the commodity
  # store, and takes into account warehouse capacity (but not
  # spoilage). Therefore it is never negative.
  product_delta_final 'int',
}

# Here "food" is an abstract quantity that includes both corn
# (land) and fish (sea). We need to distinguish between the two
# basically just for visualization purposes. But anything derived
# from these quantities is derived from the sum of corn and fish
# (total "food").
struct.FoodProduction {
  corn_produced 'int',
  fish_produced 'int',

  # Sum of corn and fish, for convenience. This is before any
  # other considerations are factored in, it's just a sum of the
  # above.
  food_produced 'int',

  food_consumed_by_colonists_theoretical 'int',

  # This could be less than the theoretical if there isn't enough
  # food in the warehouse.
  food_consumed_by_colonists_actual 'int',

  # This is zero or positive, and indicates the amount of food
  # that we are short this turn for supporting the existing
  # colonists, after this turn's food production and current
  # warehouse stores are accounted for. Note that this is inde-
  # pendent of the status of the horses since horses can never
  # create a deficiency; they only feed on surpluses (strange,
  # but that's the way it goes).
  food_deficit 'int',

  # This is >= 0, and represents the amount of extra food avail-
  # able when colonists are fed only from the food produced this
  # turn (ignoring warehouse contents). This is the amount that
  # is available for horses (since horses never consume food in
  # the warehouse), though horses might not consume all of it.
  food_surplus_before_horses 'int',

  # The number of horses that theoretically could be produced
  # this turn given an infinite amount of food production (not
  # food in the warehouse, since horses never consume that).
  horses_produced_theoretical 'int',

  # In the original game, horses (even if there are enough of
  # them to support a certain level of breeding) are not allowed
  # to consume all of the surplus food. This will give the max
  # they are allowed to consume. In the original game, it is half
  # of the food surplus rounded up.
  max_horse_food_consumption_allowed 'int',

  # This factors in the amount of food consumed per new horse to-
  # gether with the surplus to see how many horses we are allowed
  # to produce just based on that (not based on the number of
  # horses currently present).
  max_new_horses_allowed 'int',

  # The actual number of horses produced given the limited food
  # surplus. Note that this does not take into account warehouse
  # capacity.
  horses_produced_actual 'int',

  # The amount actually consumed by horses given the amount that
  # was actually produced. This will only be larger than zero if
  # the theoretical food consumed by colonists < the food pro-
  # duced.
  food_consumed_by_horses 'int',

  # The amount that should actually be added to the commodity
  # store. Will never be negative. This accounts for warehouse
  # capacity. Note that this does not take into account spoilage.
  horses_delta_final 'int',

  # The amount that should actually be added to the commodity
  # store. Could be positive or negative, but will never cause
  # the quantity of food to be negative.
  food_delta_final 'int',

  # This can be computed from the above, but it is slightly com-
  # plicated and so it is here so that consumers don't have to
  # understand how to do it.
  colonist_starved 'bool',
}

struct.SquareProduction {
  what 'e_outdoor_job',
  quantity 'int',
}

# Note regarding warehouses: the quantities of goods produced as
# indicated in this structure will be such that they will never
# cause the quantity in the store to exceed the warehouse capac-
# ity. That said, they will not take into account any loss of
# goods that happens as a result of spoilage; that needs to be
# checked after these deltas are applied. The reason for that is
# so that the consumer of this data can distinguish spoilage from
# consumption so that the player can be notified.
struct.ColonyProduction {
  # Food (which includes fish) and horses are done together be-
  # cause not only do horses consume food, they do so in a way
  # that is unlike other derived goods.
  food_horses 'FoodProduction',

  # These are needed in order to render the amount being produced
  # in each square on land in the colony view. Note that these
  # quantities are just useed for rendering in the colony view
  # and do not need to be added to the other fields, as the other
  # fields already take them into account.
  land_production 'refl::enum_map<e_direction, SquareProduction>',
  center_food_production 'int',
  # Some tiles, such as arctic, produce nothing at least on some
  # difficulty levels.
  center_extra_production 'base::maybe<SquareProduction>',

  sugar_rum      'RawMaterialAndProduct',
  tobacco_cigars 'RawMaterialAndProduct',
  cotton_cloth   'RawMaterialAndProduct',
  fur_coats      'RawMaterialAndProduct',
  lumber_hammers 'RawMaterialAndProduct',
  # These are a bit special because tools overlap between the
  # both of them. The ore_tools will be computed first, and all
  # of its fields will be filled out assuming that musket produc-
  # tion doesn't exist (with the exception of the final deltas,
  # which are not filled out immediately, as usual). Then the
  # tools_muskets will be computed in the presence of any tools
  # produced by the ore_tools stage. Both of these have a "tools
  # final delta" field, and they will both be equal and reflect
  # the true final value accounting for warehouse capacity.
  ore_tools      'RawMaterialAndProduct',
  tools_muskets  'RawMaterialAndProduct',
  # This one has no product, but we'll use the same type for con-
  # venience.
  silver         'RawMaterialAndProduct',

  # Will never be negative.
  crosses 'int',

  # Will never be negative. Note that this turn's bell production
  # will not be used to adjust the SoL % for this turn's produc-
  # tion; instead we will use last turn's SoL %.
  bells   'int',

  # This field is always zero since colonies can't produce or
  # consume trade goods, at least in the original game. But it is
  # convenient to have such a field for consistency.
  trade_goods 'int',
}
