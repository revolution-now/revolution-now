# ===============================================================
# testing.rds
#
# Project: Revolution Now
#
# Created by dsicilia on 2020-11-02.
#
# Description: RDS definitions for unit testing.
#
# ===============================================================
# Revolution Now
include "maybe.hpp"

# Cdr.
include "cdr/ext-builtin.hpp"

# C++ standard library
include "<string>"
include "<vector>"
include "<unordered_map>"

namespace "rdstest"

# Descriptive comment.
sumtype.Maybe {
  _template{ T },

  nothing {},
  just { val 'T' },
}

# Descriptive comment.
sumtype.MyVariant1 {
  # hello
  happy {
    # hello
    p 'std::pair<char, int>',
  },
  sad {
    hello 'bool',
    # hello
    ptr 'bool*',
  },
  excited {},

  _features { equality }
}

sumtype.MyVariant2 {
  first {
    name 'std::string',
    b 'bool',
  },
  second {
    flag1 'bool',
    flag2 'bool',
  },
  third {
    cost 'int',
  },

  _features { equality }
}


namespace "rdstest.inner"

sumtype.MyVariant3 {
  a1 {
    var0 'std::monostate',
  },
  a2 {
    var1 'std::monostate',
    var2 'MyVariant2_t',
  },
  a3 {
    c 'char',
  },
}

# Descriptive comment.
sumtype.MyVariant4 {
  # Alternatives.
  first {
    i 'int',
    c 'char',
    b 'bool',
    op 'rn::maybe<uint32_t>',
  },
  _2nd {},
  third {
    s 'std::string',
    var3 'MyVariant3_t',
  },
}

# Descriptive comment.
sumtype.TemplateTwoParams {
  _template{ T, U },

  # Alternatives.
  first_alternative {
    t 'T',
    c 'char',
  },
  second_alternative {},
  third_alternative {
    hello 'Maybe_t<T>',
    u 'U',
  },
}

# This one has two template parameters are references another
# sumtype.that also has two parameters.
sumtype.CompositeTemplateTwo {
  _template{ T, U },

  first {
    ttp 'rdstest::inner::TemplateTwoParams_t<T,U>',
  },
  second {},
}


namespace "rn"

sumtype.MySumtype {
  none {},
  some {
    s 'std::string',
    y 'int',
  },
  more {
    d 'double',
  },

  _features { equality }
}

sumtype.OnOffState {
  off {},
  on {
    user 'std::string',
  },
  switching_on {
    percent 'double',
  },
  switching_off {
    percent 'double',
  },

  _features { equality, }
}

sumtype.OnOffEvent {
  turn_off {},
  turn_on  {},
}

# hello
enum.e_empty {}

enum.e_single {
  hello,
}

enum.e_two {
  hello,
  world,
}

enum.e_color {
  red,
  green,
  blue,
}

enum.e_hand {
  left,
  right,
}

enum.e_count_short {
  one,
  two,
  three,
}

enum.e_count {
  one,
  two,
  three,
  four,
  five,
  six,
  seven,
  eight,
  nine,
  ten,
  eleven,
  twelve,
  thirteen,
  fourteen,
  fifteen,

  _features { nodiscard }
}

struct.EmptyStruct {}

struct.EmptyStruct2 {
  _features {}
}

struct.MyStruct {
  xxx 'int',
  yyy 'double',
  zzz_map 'std::unordered_map<std::string, std::string>',

  _features { equality, offsets, nodiscard }
}

struct.StructWithValidation {
  xxx 'int',
  yyy 'double',

  _features { equality, validation }
}


namespace "rn.test"

struct.MyTemplateStruct {
  _template{ T, U },

  xxx 'T',
  yyy 'double',
  zzz_map 'std::unordered_map<std::string, U>',
}

struct.config_testing_t {
  some_field 'int',
}

config.testing {}
